[
  {
    "\ud83d\udcdc Documentation for app.module.ts\n\n\ud83d\udccb Table of Contents\n\n1.  Overview\n2.  Imports\n3.  NgModule Decorator\n    -   Declarations\n    -   Imports\n    -   Providers\n    -   Bootstrap\n4.  Conclusion\n\n\ud83c\udf1f Overview\n\nThe app.module.ts file is a core part of an Angular application. It\ndefines the root module, AppModule, which ties together various\ncomponents, services, and other modules necessary for the application.\nThis module serves as the entry point for the Angular application when\nit is bootstrapped.\n\n\ud83d\udce6 Imports\n\nThe file begins with a series of import statements that bring in\nnecessary Angular libraries, modules, and components. Here\u2019s a\nbreakdown:\n\n  ----------------------------------------------------------------------------------\n  Import                    Description\n  ------------------------- --------------------------------------------------------\n  NgModule                  A decorator that identifies the class as an Angular\n                            module and provides metadata.\n\n  BrowserModule             Required for any Angular application that runs in a web\n                            browser.\n\n  BrowserAnimationsModule   Supports animations in the Angular application.\n\n  AppComponent              The root component of the application.\n\n  HttpClientModule          Enables communication with backend services using HTTP.\n\n  routing                   Application routing module to manage navigation.\n\n  MaterialModule            A custom module that imports Angular Material\n                            components.\n\n  AuthModule, CoreModule,   Custom modules designed for specific functionalities.\n  SharedModule,             \n  FeatureModule             \n  ----------------------------------------------------------------------------------\n\n\ud83c\udfa8 NgModule Decorator\n\nThe @NgModule decorator is used to define the metadata for the AppModule\nclass. Here\u2019s a breakdown of its properties:\n\n\ud83c\udff7\ufe0f Declarations\n\n-   AppComponent: This is the main component of the application.\n    Declaring it here allows Angular to know about it and render it\n    properly.\n\n\ud83d\udce6 Imports Section\n\nThe imports array includes all the modules that the application depends\non. This includes both Angular built-in modules and custom application\nmodules:\n\n-   BrowserModule: Provides services that are essential to launch and\n    run a browser app.\n-   BrowserAnimationsModule: Enables the use of animations in the\n    application.\n-   SharedModule: Contains shared components, directives, and pipes that\n    can be used across the application.\n-   routing: Handles navigation and URL manipulation.\n-   AuthModule: Manages authentication-related features.\n-   FeatureModule: A module that encapsulates specific features of the\n    application.\n-   CoreModule: Contains core services that are used globally across the\n    application.\n-   HttpClientModule: Facilitates HTTP communication.\n-   MaterialModule: Provides Angular Material components for UI design.\n\n\ud83e\udd1d Providers\n\n-   providers: []: This array is used to define the services that the\n    module contributes to the global collection of services. It\u2019s\n    currently empty, indicating no additional providers are declared at\n    this level.\n\n\ud83d\ude80 Bootstrap\n\n-   bootstrap: [AppComponent]: This array defines the component(s) that\n    should be bootstrapped when the module is bootstrapped. Here,\n    AppComponent is the root component that will be bootstrapped.\n\n\ud83c\udfc1 Conclusion\n\nThe app.module.ts file is the backbone of the Angular application. It\neffectively orchestrates the different modules and components to create\na cohesive and functional whole. By importing necessary modules and\ndeclaring the root component, it serves as the starting point for the\napplication. Proper understanding and structuring of this file are\ncrucial for building scalable and maintainable Angular applications.\n\nDocumentation for app.module.ts and app.component.html\n\nOverview\n\nThis documentation provides a detailed understanding of two critical\nfiles in an Angular application \u2013 app.module.ts and app.component.html.\nThese files play a significant role in setting up and structuring the\napplication.\n\n------------------------------------------------------------------------\n\nTable of Contents\n\n1.  app.module.ts\n    -   Overview\n    -   Code Breakdown\n    -   Purpose and Functionality\n    -   Key Components and Modules\n2.  app.component.html\n    -   Overview\n    -   Code Explanation\n    -   Role within the Application\n\n------------------------------------------------------------------------\n\napp.module.ts\n\nOverview\n\nThe app.module.ts is the root module of an Angular application,\nresponsible for bootstrapping the application. It imports essential\nAngular modules and third-party libraries, integrates various features,\nand declares components that are part of the application.\n\nCode Breakdown\n\n    /************************************************************************************\n     * External libraries\n     *************************************************************************************/\n    import { NgModule } from '@angular/core'": null,
    "\n    import { BrowserModule } from '@angular/platform-browser'": null,
    "\n    import { BrowserAnimationsModule } from '@angular/platform-browser/animations'": null,
    "\n\n    /************************************************************************************\n     * App Component\n     *************************************************************************************/\n    import { AppComponent } from './app.component'": null,
    "\n\n    /************************************************************************************\n     * App Modules\n     *************************************************************************************/\n    import { AuthModule } from './auth-module/auth.module'": null,
    "\n    import { CoreModule } from './core-module/core.module'": null,
    "\n    import { SharedModule } from './shared-module/shared.module'": null,
    "\n    import { FeatureModule } from './feature-module/feature.module'": null,
    "\n    import { HttpClientModule } from '@angular/common/http'": null,
    "\n    import { routing } from './routes/app.routing'": null,
    "\n    import { MaterialModule } from './material.module'": null,
    "\n\n    /************************************************************************************\n     * App Module\n     *************************************************************************************/\n    @NgModule({\n      declarations: [AppComponent],\n      imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        SharedModule,\n        routing,\n        AuthModule,\n        FeatureModule,\n        CoreModule,\n        HttpClientModule,\n        MaterialModule,\n      ],\n      providers: [],\n      bootstrap: [AppComponent],\n    })\n    export class AppModule {}\n\nPurpose and Functionality\n\n-   NgModule Decorator: This decorator marks the class as an Angular\n    module and provides configuration metadata such as declarations,\n    imports, providers, and bootstrap.\n\n-   Declarations: Declares the components, directives, and pipes that\n    belong to this module. Here, it declares AppComponent.\n\n-   Imports: Lists the external modules that the application needs. Key\n    modules include:\n\n    -   BrowserModule: Provides services essential for running and\n        rendering a browser application.\n    -   BrowserAnimationsModule: Supports animations within the app.\n    -   HttpClientModule: Facilitates HTTP communication.\n    -   Custom modules like AuthModule, CoreModule, FeatureModule,\n        SharedModule.\n\n-   Bootstrap: Specifies the root component that Angular should\n    bootstrap when it starts the application \u2013 in this case,\n    AppComponent.\n\nKey Components and Modules\n\n-   AppComponent: The main component that serves as the root of the\n    application.\n-   AuthModule, CoreModule, FeatureModule, SharedModule: Custom modules\n    encapsulating different features and services.\n-   MaterialModule: A module bundling Angular Material components to\n    enhance UI/UX.\n\n------------------------------------------------------------------------\n\napp.component.html\n\nOverview\n\nThe app.component.html file is a simple yet crucial file in an Angular\napplication. It serves as the template for the root component,\nAppComponent.\n\nCode Explanation\n\n    <router-outlet></router-outlet>\n\nRole within the Application\n\n-   RouterOutlet: Acts as a placeholder that Angular dynamically fills\n    based on the current router state. It enables navigation between\n    different views of the application without reloading the entire\n    page.\n\n-   Dynamic View Rendering: The <router-outlet> directive is pivotal for\n    rendering routed views. As users navigate through the application,\n    Angular loads the relevant component templates within this outlet.\n\n------------------------------------------------------------------------\n\nEach of these files plays a critical role in the application. The\napp.module.ts sets up the module and imports the necessary\nfunctionalities, while app.component.html provides the entry point for\nrendering routed views, facilitating smooth navigation across the app.\n\nDocumentation for user.model.ts \ud83d\udcc4\n\nIn this document, we will explore the user.model.ts file, which is an\nessential part of the application that defines the User Model. The User\nModel is crucial for managing user-related data throughout the\napplication.\n\nTable of Contents \ud83d\udcda\n\n-   Overview\n-   User Model Class\n-   Properties\n-   Constructor\n\nOverview\n\nThe user.model.ts file contains the definition of a User class. This\nclass models the user data structure and includes properties that\nrepresent the user\u2019s profile and settings. This User Model is used\nacross the application to handle user-related operations such as\nauthentication, profile management, etc.\n\nUser Model Class\n\n    export class User {\n      // Properties defined here...\n      constructor(data: Partial<User> ": null,
    "\n      this.meta ": "this.meta || ''",
    "\n    }\n\n-   Parameters: Accepts a partial user data object which enables\n    initializing only specific properties.\n-   Functionality: Uses Object.assign to merge the provided data with\n    the default class properties, ensuring that the meta property is\n    initialized with an empty string if not provided.\n\n------------------------------------------------------------------------\n\nThis file is integral in maintaining a consistent user data structure\nacross the application, facilitating efficient user data management and\nmanipulation.\n\nDocumentation for auth.module.ts\n\nOverview\n\nThe auth.module.ts file is responsible for defining the Authentication\nModule in an Angular application. This module encapsulates all\nauthentication-related components, making it easier to manage and scale\nthe authentication features of the application.\n\nCode Breakdown\n\nHere\u2019s a detailed explanation of the code in the auth.module.ts file:\n\n    import { NgModule } from '@angular/core'": null,
    "\n    import { CommonModule } from '@angular/common'": null,
    "\n    import { RouterModule } from '@angular/router'": null,
    "\n    import { SharedModule } from '../shared-module/shared.module'": null,
    "\n    import { LoginComponent } from './login/login.component'": null,
    "\n    import { PasswordResetComponent } from './password-reset/password-reset.component'": null,
    "\n\n    @NgModule({\n      declarations: [\n        LoginComponent,\n        PasswordResetComponent\n      ],\n      imports: [\n        CommonModule,\n        RouterModule,\n        SharedModule\n      ],\n      exports: [\n        LoginComponent,\n        PasswordResetComponent\n      ],\n    })\n    export class AuthModule {}\n\nImports\n\n-   NgModule: A decorator provided by Angular that is used to define a\n    module. It helps in organizing the application into cohesive blocks\n    of functionality.\n-   CommonModule: This module provides common directives such as ngIf\n    and ngFor, which are commonly used in Angular templates.\n-   RouterModule: Facilitates routing in Angular applications. It\u2019s\n    essential for navigation between different components or views.\n-   SharedModule: A custom module that contains shared components,\n    directives, and pipes used across the application.\n-   LoginComponent: Represents the login feature, providing a user\n    interface for user authentication.\n-   PasswordResetComponent: Provides functionality and UI for password\n    reset.\n\nNgModule Decorator\n\nThe @NgModule decorator marks the class as an Angular module and\nprovides configuration metadata.\n\n-   declarations: Lists the components that are part of this module.\n    Here, LoginComponent and PasswordResetComponent are declared,\n    meaning they belong to this module.\n\n-   imports: Specifies the modules that this module depends on.\n    CommonModule, RouterModule, and SharedModule are imported,\n    indicating that they are used within this module.\n\n-   exports: Lists the components that should be accessible from outside\n    this module. By exporting LoginComponent and PasswordResetComponent,\n    these components can be used in other modules that import\n    AuthModule.\n\nClass Definition\n\n-   AuthModule: This is the main class defined in this file, and it\n    encapsulates the authentication-related components and services.\n\nConclusion\n\nThe auth.module.ts file plays a crucial role in organizing\nauthentication-related functionalities within an Angular application. By\nencapsulating the LoginComponent and PasswordResetComponent within this\nmodule, the application maintains a clean and modular architecture. This\napproach improves maintainability and scalability, making it easier to\nmanage authentication features as the application grows.\n\nFeel free to reach out if you have any questions or need further\nclarification! \ud83d\ude0a\n\nDocumentation: user.modulel.ts\n\nThis file defines the User Model, which represents the structure and\ndefault values for user-related data in the application. It is a\nTypeScript class that is used to encapsulate user-specific information,\nproviding a blueprint for creating user objects.\n\nIndex\n\n-   Overview\n-   User Class Definition\n-   Attributes\n-   Constructor\n-   Usage\n\nOverview\n\nThe User model is a class that defines the structure of user data within\nthe application. It contains various properties that capture personal,\ncontact, and status information about a user. This model is essential\nfor managing user-related data effectively across the application.\n\nUser Class Definition\n\n    export class User {\n      _id?: string": null,
    "\n      firstName ": "''",
    "\n      lastName ": "''",
    "\n      company ": "''",
    "\n      email ": "''",
    "\n      emailVerified ": "false",
    "\n      profileImage ": "''",
    "\n      phone?: string": null,
    "\n      phoneVerified?: boolean": null,
    "\n      qrCodeImage?: string": null,
    "\n      meta: any": null,
    "\n      status: string | undefined": null,
    "\n      latestSelfAssessment?: any": null,
    "\n      latestTemperatureData?: any": null,
    "\n      organization?: any": null,
    "\n      address: {\n        street1: string": null,
    "\n        street2: string": null,
    "\n        state: string": null,
    "\n        city: string": null,
    "\n        country: string": null,
    "\n        zipCode: string": null,
    "\n      } ": "{\n        street1: '',\n        street2: '',\n        state: '',\n        city: '',\n        country: '',\n        zipCode: '',\n      }",
    "\n      subscribeToUpdates ": "true",
    "\n      isAdmin ": "false",
    "\n      isWellbilityPass ": "false",
    "\n      active ": "false",
    "\n      dateOfBirth: Date | undefined": null,
    "\n      labAdmin ": "false",
    "\n      twoStepVerificationEnabled ": "false",
    "\n      noPassReason?: string": null,
    "\n      constructor(data: Partial<User> ": "{}) {\n        Object.assign(this, data)",
    "\n        this.meta ": "this.meta || {}",
    "\n        this.address ": "data.address ? { ...this.address, ...data.address } : this.address",
    "\n      }\n    }\n\nAttributes\n\nHere\u2019s a breakdown of the attributes within the User class:\n\n  ------------------------------------------------------------------------------------------\n  Property Name                Type      Description\n  ---------------------------- --------- ---------------------------------------------------\n  _id                          string    Optional identifier for the user.\n\n  firstName                    string    User\u2019s first name, defaulting to an empty string.\n\n  lastName                     string    User\u2019s last name, defaulting to an empty string.\n\n  company                      string    Name of the company associated with the user.\n\n  email                        string    User\u2019s email address.\n\n  emailVerified                boolean   Indicates if the user\u2019s email has been verified,\n                                         default is false.\n\n  profileImage                 string    URL or path to the user\u2019s profile image.\n\n  phone                        string    Optional phone number of the user.\n\n  phoneVerified                boolean   Indicates if the user\u2019s phone number has been\n                                         verified.\n\n  qrCodeImage                  string    Optional URL or path to the user\u2019s QR code image.\n\n  meta                         any       Additional metadata related to the user.\n\n  status                       string    Current status of the user, such as active,\n                                         pending, etc.\n\n  latestSelfAssessment         any       Stores the most recent self-assessment data related\n                                         to the user.\n\n  latestTemperatureData        any       Stores the latest temperature data of the user.\n\n  organization                 any       Information about the organization associated with\n                                         the user.\n\n  address                      object    Contains address-related fields like street, city,\n                                         state, etc.\n\n  subscribeToUpdates           boolean   Indicates if the user is subscribed to updates,\n                                         default is true.\n\n  isAdmin                      boolean   Indicates if the user has admin privileges.\n\n  isWellbilityPass             boolean   Indicates if the user has a Wellbility Pass.\n\n  active                       boolean   Indicates if the user is active in the system.\n\n  dateOfBirth                  Date      Optional date of birth of the user.\n\n  labAdmin                     boolean   Indicates if the user is a lab administrator.\n\n  twoStepVerificationEnabled   boolean   Indicates if two-step verification is enabled for\n                                         the user.\n\n  noPassReason                 string    Reason for not having a pass, if applicable.\n  ------------------------------------------------------------------------------------------\n\nConstructor\n\nThe constructor accepts a partial User object and uses it to initialize\nthe properties of a new User instance. It applies default values where\nnecessary and ensures that certain properties, like meta and address,\nare initialized even if not provided.\n\n    constructor(data: Partial<User> ": "{}) {\n      Object.assign(this, data)",
    "\n      this.address ": "data.address ? { ...this.address, ...data.address } : this.address",
    "\n    }\n\nUsage\n\nThe User class is used throughout the application to create, manage, and\ninteract with user data. It provides a consistent structure for user\ninformation, making it easier to handle user-related operations and\nensuring that data integrity is maintained across different components\nof the application.\n\nThe class can be extended or modified to include additional fields and\nmethods as needed, providing flexibility to adapt to changing\nrequirements.\n\n\ud83d\udcdc Documentation for login.component.ts\n\nThis documentation provides a detailed explanation of the\nlogin.component.ts file, which is a part of an Angular application. The\nLoginComponent handles the logic for the user login interface.\n\n\ud83d\udcc2 Component Overview\n\nThe LoginComponent is responsible for managing the user login process,\nincluding form validation, handling login requests, and managing user\nsessions. It uses Angular\u2019s reactive forms and animations for a seamless\nuser experience.\n\nModule Imports\n\nAngular Core & Forms\n\n-   Component: Decorator to mark a class as an Angular component.\n-   OnDestroy, OnInit: Lifecycle hooks for component initialization and\n    destruction.\n-   FormGroup, Validators, FormBuilder: Used to create and validate\n    reactive forms.\n\nAngular Animations\n\n-   trigger, state, transition, animate, style: Used for creating\n    animations within the component.\n\nAngular Router\n\n-   Router: Enables navigation between views in the application.\n\nRxJS\n\n-   Subscription: Represents the execution of an observable and provides\n    methods to unsubscribe.\n\nCore Services\n\n-   AuthService: Manages authentication tasks such as login and storing\n    user session data.\n-   LayoutService: Provides information about the application\u2019s layout,\n    such as screen size.\n-   SweetAlertService: Service for displaying alert messages to the\n    user.\n\n\ud83d\ude80 Component Metadata\n\nThe component is decorated with the @Component decorator which provides\nmetadata about the component:\n\n-   selector: 'app-login': The component\u2019s CSS selector used in\n    templates.\n-   templateUrl: './login.component.html': Path to the component\u2019s HTML\n    template.\n-   styleUrls: ['./login.component.scss']: Path to the component\u2019s\n    styles.\n-   animations: Defines animations to enhance user interactions.\n\nAnimation: visible\n\nThe visible trigger manages the opacity of the component for smooth\ntransitions between visible states:\n\n-   state('show'): Opacity set to 1, making the component fully visible.\n-   state('hide'): Opacity set to 0, making the component invisible.\n-   transition: Defines the transition times and easing between states.\n\n\ud83e\udde9 Component Class: LoginComponent\n\nProperties\n\n-   loading: boolean: Indicates if a login operation is in progress.\n-   user: FormGroup: Form group for capturing user login details.\n-   screenSizeSubscription: Subscription: Subscription to monitor screen\n    size changes.\n-   isMobileView: boolean: Flag indicating if the application is viewed\n    on a mobile device.\n\nConstructor\n\nThe constructor initializes the component and its dependencies:\n\n-   FormBuilder: Used to create the form group.\n-   AuthService, Router, LayoutService, SweetAlertService: Injected\n    services for handling authentication, navigation, layout management,\n    and displaying alerts.\n\nLifecycle Hooks\n\n-   ngOnInit(): Subscribes to screen size changes to determine if the\n    application is in mobile view.\n-   ngOnDestroy(): Unsubscribes from the screen size subscription to\n    prevent memory leaks.\n\nMethods\n\nsetupForms()\n\nInitializes the login form with validators:\n\n-   email: Required and must be a valid email format.\n-   password: Required field.\n\nlogin()\n\nHandles the login process:\n\n1.  Sets loading to true.\n2.  Retrieves form values using getRawValue().\n3.  Calls AuthService.login() with the form payload.\n4.  On success:\n    -   Logs a success message.\n    -   Extracts authentication details from the response.\n    -   Saves authentication data via AuthService.\n    -   Navigates to the dashboard.\n5.  On error:\n    -   Sets loading to false.\n    -   Displays an error message using SweetAlertService.\n\n\ud83e\uddea Usage Example\n\nTo use the LoginComponent, include its selector <app-login></app-login>\nin a template where the login form should appear.\n\n\ud83c\udfa8 Styles\n\nThe login.component.scss file contains styles specific to the login\ncomponent, ensuring a consistent and engaging user interface.\n\n\ud83d\udd17 Related Modules\n\n-   AuthModule: Declares and exports the LoginComponent among other\n    authentication-related components.\n\nThis documentation provides a comprehensive overview of the\nLoginComponent, detailing its purpose, usage, and functionality within\nthe Angular application. The component effectively manages user\nauthentication with smooth animations and responsive design adjustments.\n\nDocumentation for login.component.html \ud83d\udcc4\n\nThe login.component.html file is an Angular template file that defines\nthe structure and layout of the login form within the application. It is\nassociated with the LoginComponent and renders the login interface for\nboth desktop and mobile views. This document will explain the various\nsections and elements included in the login.component.html file.\n\nTable of Contents\n\n-   Overview\n-   Structure\n-   Sections and Elements\n    -   Loading Component\n    -   Desktop Login Form Section\n    -   Mobile Login Form Section\n-   Important Features\n\nOverview\n\nThe login.component.html file contains the HTML markup for a responsive\nlogin form. The form is designed to adapt to different screen sizes,\nrendering a suitable layout for both desktop and mobile devices. It\nincludes form fields for email and password, validation messages, and\nbuttons for login and password recovery.\n\nStructure\n\n    <!-- Loading Component -->\n    <div class": null,
    "\n    import { ActivatedRoute, Router } from '@angular/router'": null,
    "\n    import { AbstractControl, FormGroup, Validators, FormBuilder } from '@angular/forms'": null,
    "\n    import { HttpService } from '../../core-module/services/http.service'": null,
    "\n    import { AuthService } from '../../core-module/services/auth.service'": null,
    "\n    import { SweetAlertService } from 'src/app/core-module'": null,
    "\n\n-   Angular Core: Essential services and decorators like Component.\n-   Routing: For navigation and accessing route parameters.\n-   Forms: For managing user input via reactive forms.\n-   Services: Custom services for HTTP requests, authentication, and\n    displaying alerts.\n\nComponent Decorator\n\n    @Component({\n      selector: 'app-password-reset',\n      templateUrl: './password-reset.component.html',\n      styleUrls: ['./password-reset.component.scss'],\n    })\n    export class PasswordResetComponent { ... }\n\n-   selector: The component\u2019s CSS selector.\n-   templateUrl & styleUrls: Links to the component\u2019s HTML and SCSS\n    files.\n\nClass Properties\n\n-   loading: A boolean indicating if a loading state is active.\n-   show: An object tracking which view is currently displayed\n    (passwordSet or passwordReset).\n-   user & account: Form groups for managing user input fields.\n-   token: Stores the password reset token from the route parameters.\n\nConstructor\n\n    constructor(\n      private authService: AuthService,\n      private router: Router,\n      private activatedRoute: ActivatedRoute,\n      private fb: FormBuilder,\n      private httpService: HttpService,\n      private sweetAlertService: SweetAlertService,\n    ) {\n      this.activatedRoute.params.subscribe((params) ": null,
    "\n        if (this.token) {\n          this.toggleView('passwordSet')": null,
    "\n        } else {\n          this.toggleView('passwordReset')": null,
    "\n        }\n      })": null,
    "\n      this.setupForms()": null,
    "\n    }\n\n-   Dependencies: Utilizes dependency injection for services like\n    AuthService, Router, ActivatedRoute, FormBuilder, HttpService, and\n    SweetAlertService.\n-   Route Parameters: Listens to route parameters to determine if a\n    reset token is provided, switching views accordingly.\n\nMethods\n\nsetupForms\n\n    setupForms() {\n      this.user ": "this.fb.group({\n        email: [null, [Validators.required, Validators.email]],\n      })",
    "\n      this.account ": "this.fb.group({\n        password: [null, [Validators.required, Validators.minLength(8)]],\n        confirmPassword: [null, [Validators.required, Validators.minLength(8)], this.validatePasswordMatch.bind(this)],\n        token: this.token,\n      })",
    "\n    }\n\n-   user Form: Captures the email for password reset requests.\n-   account Form: Captures the new password and confirmation for setting\n    a new password, including validation.\n\npasswordReset\n\n    passwordReset() {\n      this.loading ": "true",
    "\n      this.httpService.post('auth/password-reset-request', this.user.getRawValue()).subscribe({\n        next: () ": null,
    "\n          this.sweetAlertService.showSuccess('Email Sent', 'Please check your mailbox for password reset link.')": null,
    "\n          this.router.navigateByUrl('/login')": null,
    "\n        },\n        error: (error) ": null,
    "\n          this.sweetAlertService.showError('Password reset Error', error.error.message)": null,
    "\n        },\n      })": null,
    "\n    }\n\n-   Purpose: Sends a password reset link to the user\u2019s email.\n-   Alerts: Notifies success or failure using SweetAlertService.\n\nsetNewPassword\n\n    setNewPassword() {\n      this.loading ": "true",
    "\n      this.httpService.post('auth/password-reset', this.account.getRawValue()).subscribe({\n        next: () ": null,
    "\n          this.sweetAlertService.showSuccess('Password changed', 'Password changed successfully')": null,
    "\n          this.account.reset()": null,
    "\n          this.sweetAlertService.showError('Unable to reset password', error.error.message)": null,
    "\n    }\n\n-   Purpose: Updates the password after validation.\n-   Alerts: Notifies result using SweetAlertService.\n\ntoggleView\n\n    toggleView(target: keyof ShowStatus) {\n      this.show.passwordSet ": "false",
    "\n      this.show.passwordReset ": "false",
    "\n      this.show[target] ": "true",
    "\n    }\n\n-   Purpose: Switches between password setup and reset request views.\n\nvalidatePasswordMatch\n\n    validatePasswordMatch(control: AbstractControl) {\n      return new Promise((resolve) ": null,
    "\n        if (passwordControl) {\n          if (control.value ": null,
    "\n          }\n        }\n        return resolve({ validMatch: true })": null,
    "\n      })": null,
    "\n    }\n\n-   Purpose: Validates if password and confirmPassword fields match.\n\nSummary\n\nThe PasswordResetComponent is an essential part of the authentication\nflow, providing users with the ability to recover access by resetting\ntheir passwords. With robust form handling and feedback mechanisms, it\nensures a smooth user experience. \ud83d\ude80\n\nFor any further integration or customization, ensure that dependencies\nsuch as services and routes are correctly configured in the application.\n\ud83c\udfa8\n\nPassword Reset Component (HTML)\n\nThe password-reset.component.html file is a template for the Password\nReset component in an Angular application. It is designed to handle two\nmain functionalities: sending a password reset link to the user\u2019s email\nand setting a new password using a reset token.\n\n------------------------------------------------------------------------\n\nStructure Overview\n\nThe template is divided into two main sections, controlled by the show\nobject, which determines which form is visible to the user:\n\n1.  Password Reset Request Form\n2.  Set New Password Form\n\n------------------------------------------------------------------------\n\nPassword Reset Request Form\n\nPurpose\n\nThis form is used to request a password reset link to be sent to the\nuser\u2019s registered email address.\n\nTemplate Structure\n\n-   Loading State: A loading indicator is shown when an asynchronous\n    operation is in progress.\n\n        <div class": null,
    " margin-top: 40px\">IMMUNIZATION CONSENT AND NOTICE</mat-card-subtitle>\n    <p>\n      By signing below, I acknowledge that I have received and reviewed the information provided...\n    </p>\n    <mat-checkbox formControlName": null,
    "\n    }\n\nSignature Handling\n\nSignature pads are managed through various methods such as\nsetupSignaturePad, clearSignature, and drawComplete. These methods\nensure that signatures are correctly captured, displayed, and validated.\n\nData Handling\n\n-   Data Fetching: The getConsentFormData method retrieves existing form\n    data by form ID, useful for editing functionality.\n-   Data Submission: The consentFormSubmit method validates form data\n    and constructs payloads for API requests.\n\nUtilities and Helpers\n\n-   Age Calculation: Automatically calculates age based on the\n    dateOfBirth.\n-   Validators: Custom validators like schoolObjectValidator ensure that\n    fields meet specific criteria.\n\nAPI Endpoints\n\nThe component interacts with several API endpoints to fetch school data\nand submit forms, adapting the endpoint and method based on context\n(e.g., creating vs.\u00a0updating a form).\n\n------------------------------------------------------------------------\n\nConclusion\n\nThe ConsentFormComponent is a sophisticated part of the application,\ndesigned to handle intricate form logic with a focus on user experience\nand data integrity. It leverages Angular\u2019s reactive forms and integrates\nseamlessly with backend services, ensuring that users can efficiently\nmanage consent forms for vaccination processes.\n\n------------------------------------------------------------------------\n\nFuture Improvements\n\n-   Enhanced Validation: Implement additional client-side checks for\n    form validation.\n-   Performance Optimization: Minimize API calls and improve loading\n    states management.\n-   Accessibility Enhancements: Ensure compliance with accessibility\n    standards for a broader user base.\n\nFor further details or contributions, please refer to the project\nrepository.\n\nDocumentation for consent-form-with-image.component.html\n\nOverview\n\nThe consent-form-with-image.component.html file is an Angular template\nthat provides a user interface for submitting a consent form with an\nimage. The form is designed for collecting vaccine consent information,\nincluding patient details, school, and administrative details, along\nwith an option to upload an image related to the form. This component is\npart of an Angular application that seems to manage vaccination\nconsents.\n\nStructure\n\nThe main structure of the template includes:\n\n-   Loading Component: Displays a loading indicator while data is being\n    processed.\n-   Form Section: The main form for inputting consent details, including\n    personal information, school details, and image upload.\n-   Administrative Section: Additional sections for vaccine\n    administrators to fill out details related to the administration of\n    the vaccine.\n\nComponents and Features\n\nBelow is a breakdown of the significant parts of the component and their\nfunctionalities:\n\n1. Loading Indicator\n\n    <div class": null,
    "\n    import { MatDialogRef } from '@angular/material/dialog'": null,
    "\n    import { Subscription } from 'rxjs'": null,
    "\n    import { LayoutService } from 'src/app/core-module/services/layout-service'": null,
    "\n\nComponent Decorator\n\n    @Component({\n      selector: 'app-capture-image',\n      templateUrl: './capture-image.component.html',\n      styleUrls: ['./capture-image.component.scss'],\n    })\n\nComponent Class\n\nProperties\n\n-   WIDTH & HEIGHT: Dimensions for the captured image.\n-   isMobileView: Boolean to toggle mobile view based on screen size.\n-   screenSizeSubscription: Subscription to monitor screen size changes.\n-   video, canvas: ViewChild references to HTML elements for video and\n    canvas.\n-   capture: Object holding the captured image file and URL.\n-   error: Stores error messages related to camera access.\n-   isCaptured: Boolean to check if an image has been captured.\n-   stream: Holds the media stream for the camera.\n-   loading: Boolean indicating if the camera setup is in progress.\n\nConstructor\n\nThe constructor injects required services: - MatDialogRef: Reference to\nthe dialog containing this component. - ChangeDetectorRef: Allows manual\nchange detection. - LayoutService: Checks device layout\n(mobile/desktop).\n\nLifecycle Hooks\n\n-   ngOnInit: Initializes screen size monitoring.\n-   ngAfterViewInit: Sets up the camera after view initialization.\n-   ngOnDestroy: Cleans up media streams and subscriptions.\n\nMethods\n\nsetupDevices\n\n-   Description: Initializes the camera for capturing images.\n-   Returns: None.\n-   Async: Yes.\n\n    async setupDevices() { /* ... */ }\n\ncheckCameraPermission\n\n-   Description: Checks the current state of camera permissions.\n-   Returns: Promise<PermissionState>\n\n    async checkCameraPermission(): Promise<PermissionState> { /* ... */ }\n\nretryPermission\n\n-   Description: Retries setting up the camera after permissions are\n    granted.\n\n    retryPermission() { /* ... */ }\n\ncaptureImage\n\n-   Description: Captures the current frame from the video stream and\n    converts it to an image file.\n\n    captureImage() { /* ... */ }\n\ndrawImageToCanvas\n\n-   Description: Draws the video frame to the canvas element.\n\n    drawImageToCanvas(image: any) { /* ... */ }\n\ncleanupStream\n\n-   Description: Stops all media tracks and releases the camera stream.\n\n    cleanupStream() { /* ... */ }\n\ncloseDialog\n\n-   Description: Closes the dialog and returns the captured image.\n\n    closeDialog() { /* ... */ }\n\ndataURLtoFile\n\n-   Description: Converts a data URL to a File object.\n\n    dataURLtoFile(dataurl: string, filename: string): File { /* ... */ }\n\nUsage\n\nThe CaptureImageComponent can be used in any Angular application where a\ndialog-based image capture feature is required. It manages camera\npermissions, captures images, and handles the conversion of captured\nimages into file objects seamlessly.\n\nConclusion\n\nThe CaptureImageComponent is a robust solution for capturing images\ndirectly from a user\u2019s camera, with built-in handling for permissions\nand responsive design considerations. It is designed to work efficiently\nwithin a dialog, making it a versatile choice for applications requiring\ncamera input functionality.\n\nDocumentation for CaptureImageComponent\n\nOverview \ud83d\udcf8\n\nThe CaptureImageComponent is an Angular component designed to capture an\nimage using the device\u2019s camera. This component is ideal for\napplications requiring user verification, identity capture, or any\nfunctionality needing a live image capture. It provides a user interface\nfor capturing an image, showing the live video stream, and handling\npermission errors gracefully.\n\ncapture-image.component.ts \ud83d\udcc4\n\nImports and Decorators\n\n-   Angular Core and Material:\n    -   Component, ElementRef, ViewChild, AfterViewInit, OnDestroy,\n        ChangeDetectorRef, OnInit from @angular/core.\n    -   MatDialogRef from @angular/material/dialog for dialog\n        operations.\n-   RxJS:\n    -   Subscription for handling reactive subscriptions.\n-   Custom Services:\n    -   LayoutService from the project\u2019s core module to determine the\n        screen size.\n\nComponent Metadata\n\n-   Selector: app-capture-image\n-   Template URL: ./capture-image.component.html\n-   Style URL: ./capture-image.component.scss\n\nClass Properties\n\n-   WIDTH and HEIGHT: Define the dimensions of the capture area.\n-   isMobileView: Boolean indicating if the view is mobile.\n-   screenSizeSubscription: Manages subscriptions to screen size\n    changes.\n-   video & canvas: References to the HTML video and canvas elements.\n-   capture: Stores the captured image file and URL.\n-   error: Stores any errors encountered during image capture.\n-   isCaptured: Boolean indicating if an image has been captured.\n-   stream: Holds the media stream for the video.\n-   loading: Boolean indicating if the component is in a loading state.\n\nLifecycle Hooks\n\n-   ngOnInit: Subscribes to screen size changes to determine if the\n    device is mobile.\n-   ngAfterViewInit: Sets up the media devices after the view\n    initializes.\n-   ngOnDestroy: Cleans up the media stream and any subscriptions.\n\nMethods\n\n-   setupDevices: Initializes the camera for video capture, checking\n    permissions and handling errors.\n-   checkCameraPermission: Checks if the browser has permission to use\n    the camera.\n-   retryPermission: Allows users to retry setting up the camera if\n    permission was previously denied or failed.\n-   captureImage: Captures the image from the video stream and processes\n    it to a file.\n-   drawImageToCanvas: Draws the video image to the canvas.\n-   cleanupStream: Stops the video stream and cleans up resources.\n-   closeDialog: Closes the dialog and passes the captured image back.\n-   dataURLtoFile: Converts a data URL to a File object for further\n    processing.\n\ncapture-image.component.html \ud83d\uddbc\ufe0f\n\nStructure\n\nThe HTML template provides the user interface for capturing an image. It\nincludes:\n\n-   Title: \u201cCapture Your Image\u201d\n-   Loading Indicator: Displays a loading spinner when the component is\n    in a loading state.\n-   Video and Canvas Elements:\n    -   video: Shows the live video stream from the camera.\n    -   canvas: Displays the captured image after the photo is taken.\n-   Action Buttons:\n    -   \u201cCapture Photo\u201d: Initiates the image capture if no errors are\n        present.\n    -   Error Message Display: Shows error messages if camera access\n        fails.\n\nFunctional Highlights\n\n-   Responsive Design: Adjusts to different screen sizes using\n    isMobileView.\n-   Permission Handling: Provides user messages for camera access issues\n    and allows retrying the setup.\n-   Image Processing: Captures the image from the video stream and\n    converts it to a downloadable format.\n\nConclusion\n\nThe CaptureImageComponent is a powerful tool for integrating image\ncapture functionality in Angular applications. It handles camera\npermissions, provides a user-friendly interface for capturing images,\nand efficiently processes image data for use within the application.\nThis component is particularly useful in scenarios that require user\nidentity verification or real-time image capture.\n\nImageUploadComponent Documentation\n\nThe ImageUploadComponent is a versatile Angular component that allows\nusers to upload images, capture new images using the device\u2019s camera,\nand manage the uploaded/captured images efficiently. This component is\ndesigned with flexibility in mind, offering support for both image\npreview and file management.\n\nIndex\n\n1.  Component Purpose\n2.  Component Structure\n3.  Inputs\n4.  Outputs\n5.  Methods\n6.  Helper Methods\n7.  Usage\n\n------------------------------------------------------------------------\n\nComponent Purpose\n\nThe ImageUploadComponent enables users to:\n\n-   Upload images via file selection\n-   Capture images directly from the device\u2019s camera\n-   Preview selected and captured images immediately\n-   Remove images from the selection\n-   Emit the selected/captured images for further processing\n\nThis component is particularly useful in scenarios where images need to\nbe uploaded dynamically, such as in forms that require profile pictures\nor supporting documents.\n\nComponent Structure\n\n    import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core'": null,
    "\n    import { MatDialog } from '@angular/material/dialog'": null,
    "\n    import { CaptureImageComponent } from '../dialog/capture-image/capture-image.component'": null,
    "\n\n    interface SelectedFile {\n      file: File | null": null,
    "\n      url: string": null,
    "\n      isNew: boolean": null,
    "\n    }\n\n    @Component({\n      selector: 'app-image-upload',\n      templateUrl: './image-upload.component.html',\n      styleUrls: ['./image-upload.component.scss'],\n    })\n    export class ImageUploadComponent implements OnChanges {\n      // ... component code ...\n    }\n\nInputs\n\n-   imageUrl: string[]: An array of image URLs that represent existing\n    images. These images are pre-loaded into the component when it\n    initializes.\n\n-   imageInputDisable: boolean | null: A flag to disable the image input\n    functionality. This can be used to prevent users from adding new\n    images.\n\nOutputs\n\n-   fileSelected: EventEmitter<SelectedFile[]>: Emits the array of\n    selected files whenever there are changes. This allows parent\n    components to react to file selection or removal.\n\nMethods\n\nngOnChanges(changes: SimpleChanges): void\n\n-   Purpose: Detects changes to the imageUrl input and updates the\n    internal list of selected files accordingly.\n-   Parameters: changes - an object representing the changed properties.\n\nonFilesSelected(event: any): void\n\n-   Purpose: Handles file selection from an input element, creating\n    local URLs for image previews.\n-   Parameters: event - the event triggered by the file input element.\n\nremoveImage(index: number, event: Event): void\n\n-   Purpose: Removes an image from the selectedFiles array based on the\n    given index.\n-   Parameters:\n    -   index - the index of the image to be removed.\n    -   event - the event object to stop propagation.\n\nopenDialog(): void\n\n-   Purpose: Opens a dialog for capturing images using the device\u2019s\n    camera.\n-   Functionality: Utilizes CaptureImageComponent to capture and return\n    an image.\n\nHelper Methods\n\ngetFileTypeFromUrl(url: string): string\n\n-   Purpose: Determines the MIME type of a file based on its URL\n    extension.\n-   Parameters: url - the URL of the file.\n-   Returns: The MIME type string.\n\ngetFilenameFromUrl(url: string): string\n\n-   Purpose: Extracts the filename from a given URL.\n-   Parameters: url - the URL of the file.\n-   Returns: The filename as a string.\n\nUsage\n\nTo use the ImageUploadComponent in your Angular application, ensure that\nyou have the CaptureImageComponent available within your module\u2019s\ndeclarations or entry components (if using Angular CLI, add it to\nentryComponents).\n\n    <app-image-upload\n      [imageUrl]": null,
    "\n    }\n\n    @Component({\n      selector: 'app-image-upload',\n      templateUrl: './image-upload.component.html',\n      styleUrls: ['./image-upload.component.scss'],\n    })\n    export class ImageUploadComponent implements OnChanges {\n      selectedFiles: SelectedFile[] ": "[]",
    "\n      @Input() imageUrl: string[] ": "[]",
    "\n      @Input() imageInputDisable: boolean | null ": "null",
    "\n      @Output() fileSelected ": "new EventEmitter<SelectedFile[]>()",
    "\n      \n      // Other Code...\n    }\n\n------------------------------------------------------------------------\n\nFile: image-upload.component.html\n\nOverview\n\nThe template provides the structure for the image upload interface,\nallowing users to upload files, view previews, and capture images.\n\nKey Elements\n\n-   File Input: An HTML input element of type file that accepts images\n    and PDFs.\n-   Capture Button: A button to open the dialog for image capture.\n-   Preview Section: Displays thumbnails for images or links for PDFs.\n-   Delete Button: Allows removal of items from the selected files list.\n\nFeatures\n\n-   Upload Files: Users can upload multiple images or PDF files.\n-   Capture Image: Utilizes the device camera to capture an image.\n-   Preview & Manage: Uploaded/captured files are previewed, and users\n    can delete files if needed.\n\nHTML Structure\n\n    <div class": null,
    " let i ": null,
    "\n    import { AuthService } from 'src/app/core-module'": null,
    "\n    import { Router } from '@angular/router'": null,
    "\n\n-   Component: Core Angular module to define a component.\n-   AuthService: Custom service to handle authentication logic.\n-   Router: Angular service for navigating between views.\n\nComponent Decorator\n\n    @Component({\n      selector: 'app-dashboard',\n      templateUrl: './dashboard.component.html',\n      styleUrls: ['./dashboard.component.scss'],\n    })\n\n-   selector: Defines the custom HTML tag used for this component.\n-   templateUrl: Points to the HTML file that defines the component\u2019s\n    view.\n-   styleUrls: Points to the SCSS file for component-specific styles.\n\nClass Definition\n\n    export class DashboardComponent {\n      loading ": "false",
    "\n      constructor(\n        private router: Router,\n        public authService: AuthService,\n      ) {\n        this.loading ": "false",
    "\n      }\n    }\n\n-   loading: Boolean flag to indicate if the component is in a loading\n    state.\n-   constructor:\n    -   Router: Injected to enable navigation.\n    -   AuthService: Injected to access authentication functionalities.\n-   Initializes the loading flag to false.\n\nUnused Code\n\nSeveral methods and properties are currently commented out:\n\nUser Status Enumeration\n\n    // userStatusEnum ": null,
    " })": null,
    "\n\n-   Presumably intended to load user-related data.\n-   Sets loading to false once data is fetched.\n\nPotential Methods\n\n-   getLastTested: Retrieves last assessment timestamp.\n-   getStatus: Determines user\u2019s current status.\n-   navigateTo: Navigates to a specified route.\n-   getMessage: Fetches a status-based message.\n\nThese methods suggest planned functionalities to enhance user\ninteraction by providing status updates and navigational aids.\n\nConclusion\n\nThe DashboardComponent currently serves as a foundational piece for the\nuser interface, with placeholders for enhanced interactivity and data\nhandling. As it stands, it is prepared for integration with more dynamic\nuser data and interactions, indicating potential expansion of its\ncapabilities in the future. For full functionality, one would need to\nuncomment and implement the intended features, possibly linking to user\ndata and additional services.\n\nDocumentation for Dashboard Component\n\nWelcome to the documentation for the DashboardComponent and its\ncorresponding HTML template. This component serves as the main dashboard\ninterface for authenticated users within the application, providing them\nwith personalized information and a welcoming interface.\n\nIndex\n\n1.  DashboardComponent (dashboard.component.ts)\n    -   Overview\n    -   Constructor\n    -   Dependencies\n    -   Methods\n2.  Dashboard HTML Template (dashboard.component.html)\n    -   Overview\n    -   Structure and Description\n\n------------------------------------------------------------------------\n\nDashboardComponent (dashboard.component.ts) \n\nOverview\n\nThe DashboardComponent is an Angular component responsible for\ndisplaying a user\u2019s dashboard interface. This component does not contain\nany complex business logic, but it serves as a landing page after a user\nlogs in, providing a welcoming message and user-specific details such as\nusername and roles within the organization.\n\nConstructor\n\n    constructor(\n      private router: Router,\n      public authService: AuthService,\n    ) {\n      this.loading ": "false",
    "\n    }\n\n-   Router: Injected to potentially navigate to different routes (though\n    navigation logic is currently commented out).\n-   AuthService: Provides user authentication details, such as username,\n    institution name, and roles.\n\nDependencies\n\n-   AuthService: Used to retrieve user information.\n-   Router: Used for navigation purposes if needed in the future.\n\nMethods\n\nCurrently, the DashboardComponent does not implement any active methods.\nHowever, there are several commented-out methods in the code, indicating\npotential features for future development:\n\n-   getLastTested(): Intended to retrieve the timestamp of the user\u2019s\n    last self-assessment.\n-   getStatus(): Intended to fetch the user\u2019s current health status.\n-   navigateTo(target: string): A method for navigation to different\n    routes.\n-   getMessage(): Intended to retrieve a message based on the user\u2019s\n    assessment status.\n\n------------------------------------------------------------------------\n\nDashboard HTML Template (dashboard.component.html) \n\nOverview \n\nThe HTML template for the DashboardComponent provides a user-friendly\ninterface displaying a welcome message and information about the user\u2019s\nassociation with an organization.\n\nStructure and Description \n\n    <!-- Loading Component -->\n    <div class": null,
    " margin-bottom: 48px\">\n            You are a member of {{ authService.getInstitutionName() }}.\n          </h2>\n          \n          <div>\n            <h4>As part of this organization, you have the following roles / authorization:</h4>\n            <ul>\n              <li> {{ authService.getUserRole() }} </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </section>\n\nKey Sections\n\n-   Loading Component: Displays a loading spinner if the loading flag is\n    true.\n\n-   Main Dashboard Section:\n\n    -   Title: Displays \u201cDashboard\u201d centered on the page.\n    -   Welcome Message: Shows a personalized welcome message using the\n        username from AuthService.\n    -   Organization Details: Presents the user\u2019s institution name and\n        their role(s) within the organization.\n\nUX Considerations\n\n-   Responsive Design: Utilizes Angular Flex Layout (fxLayout) for\n    responsive and flexible design across different screen sizes.\n-   User Personalization: The page is dynamic, allowing content to\n    change based on the authenticated user\u2019s details provided by\n    AuthService.\n\nThis component and its template form the basis of the user dashboard,\noffering potential for further expansion and integration with additional\nfeatures and data.\n\nSignaturePad Directive Documentation\n\nThe SignaturePadDirective is an Angular directive that integrates the\nsignature_pad library to enable capturing and managing user signatures\nwithin an Angular application. This directive is designed to be used in\nforms, providing a seamless way to capture, display, and manage\nsignatures.\n\nTable of Contents\n\n1.  Overview\n2.  Usage\n3.  Inputs\n4.  Public Methods\n5.  ControlValueAccessor Implementation\n6.  Event Management\n7.  Mobile Responsiveness\n8.  Example\n\nOverview\n\nThe SignaturePadDirective provides a simple interface for capturing\nsignature input via a canvas element. It uses the signature_pad library\nto handle the drawing and export of signatures as data URLs. The\ndirective is equipped to handle changes in screen size, making it\nresponsive and suitable for both desktop and mobile views.\n\nUsage\n\nTo use the SignaturePadDirective, add the directive to a canvas element\nwithin your component template:\n\n    <canvas appSignaturePad [options]": null,
    "\n        canvas.width ": "canvas.offsetWidth",
    "\n        canvas.height ": "canvas.offsetHeight",
    "\n    })": null,
    "\n\nExample\n\n    <canvas appSignaturePad \n            [options]": null,
    "\n    import { FormBuilder, FormGroup, Validators } from '@angular/forms'": null,
    "\n    import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog'": null,
    "\n    import { HttpService, LayoutService, SweetAlertService } from 'src/app/core-module'": null,
    "\n\nClass: CreateUpdateDistrictDialogComponent\n\nDecorators\n\n-   @Component: Defines the component and its metadata, including the\n    selector, template URL, and styles.\n\nClass Properties\n\n-   formElement: ElementRef - A reference to the form DOM element.\n-   districtForm: FormGroup - The reactive form group for the district\n    form.\n-   loading: boolean - A flag indicating whether a loading spinner\n    should be shown.\n-   isMobileView: boolean - A flag indicating whether the view is in\n    mobile mode.\n-   screenSizeSubscription: Subscription - Subscription to screen size\n    changes for determining layout.\n-   isEditMode: boolean - A flag indicating if the component is in edit\n    mode.\n\nConstructor\n\nThe constructor initializes services and form controls. It checks if the\ncomponent should be in edit mode by examining the input data.\n\n    constructor(\n      private fb: FormBuilder,\n      public dialogRef: MatDialogRef<CreateUpdateDistrictDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n      private httpService: HttpService,\n      private sweetAlertService: SweetAlertService,\n      private layoutService: LayoutService,\n    ) {\n      this.districtForm ": "this.fb.group({\n        name: ['', Validators.required],\n      })",
    "\n\n      if (data && data.district_id && data.isEdit) {\n        this.isEditMode ": "true",
    "\n        this.getDistrict(data.district_id)": null,
    "\n      }\n    }\n\nLifecycle Hooks\n\nngOnInit\n\nSubscribes to the layout service to determine if the device is in mobile\nview.\n\n    ngOnInit(): void {\n      this.screenSizeSubscription ": null,
    "\n    }\n\nngOnDestroy\n\nUnsubscribes from the screen size subscription to prevent memory leaks.\n\n    ngOnDestroy(): void {\n      if (this.screenSizeSubscription) {\n        this.screenSizeSubscription.unsubscribe()": null,
    "\n      }\n    }\n\nMethods\n\ngetDistrict\n\nFetches district data using the district ID and patches the form with\nthe data.\n\n    getDistrict(district_id: string) {\n      this.loading ": "true",
    "\n      this.httpService.get<{ data: any }>(`api/districts/${district_id}`).subscribe({\n        next: (response) ": "> {\n          this.patchForm(response['data'])",
    "\n          this.sweetAlertService.showError('Unable to fetch School', error.error.message)": null,
    "\n    }\n\npatchForm\n\nPatches the reactive form with the district data.\n\n    patchForm(data: any) {\n      this.districtForm.patchValue({\n        name: data.name,\n      })": null,
    "\n      this.loading ": "false",
    "\n    }\n\nmarkAllFieldsTouchedAndDirty\n\nMarks all form fields as touched and dirty for validation purposes.\n\n    markAllFieldsTouchedAndDirty(formGroup: FormGroup): void {\n      Object.keys(formGroup.controls).forEach((key) ": null,
    "\n        if (control instanceof FormGroup) {\n          this.markAllFieldsTouchedAndDirty(control)": null,
    "\n        } else {\n          control?.markAsTouched()": null,
    "\n          control?.markAsDirty()": null,
    "\n    }\n\ndistrictFormSubmit\n\nHandles the form submission, validates it, and sends a save or update\nrequest based on the mode.\n\n    districtFormSubmit(): void {\n      this.markAllFieldsTouchedAndDirty(this.districtForm)": null,
    "\n      if (this.districtForm.invalid) {\n        this.scrollToFirstInvalidControl()": null,
    "\n      } else {\n        this.loading ": "true",
    "\n        const formData ": "this.districtForm.value",
    "\n        const payload: Payload ": "{\n          name: formData.name,\n        }",
    "\n        this.saveForm(payload)": null,
    "\n      }\n    }\n\nsaveForm\n\nSaves or updates the district based on the mode, using the HTTP service\nto send the data to the backend.\n\n    saveForm(payload: object) {\n      this.loading ": "true",
    "\n      const apiEndpoint ": "this.isEditMode ? `api/districts/${this.data.district_id}` : 'api/districts'",
    "\n      const httpMethod ": "this.isEditMode ? 'put' : 'post'",
    "\n      const successMessage ": "this.isEditMode ? 'District Updated' : 'New District Created'",
    "\n      const successDescription ": "this.isEditMode ? 'District updated' : 'New District created'",
    "\n      const errorMessage ": "this.isEditMode ? 'Data Update Error' : 'Data Save Error'",
    "\n\n      this.httpService[httpMethod](apiEndpoint, payload).subscribe({\n        next: () ": null,
    "\n          this.sweetAlertService.showSuccess(successMessage, successDescription)": null,
    "\n          this.closeDialog('Data Save Or Update')": null,
    "\n          this.sweetAlertService.showError(errorMessage, error.error.message)": null,
    "\n    }\n\ncloseDialog\n\nCloses the dialog and optionally passes a message.\n\n    closeDialog(message ": "'') {\n      this.dialogRef.close(message)",
    "\n    }\n\nonCancel\n\nCloses the dialog without any message.\n\n    onCancel(): void {\n      this.closeDialog()": null,
    "\n    }\n\nConclusion\n\nThe CreateUpdateDistrictDialogComponent is a well-structured component\ndesigned for managing district entities. It leverages Angular\u2019s reactive\nforms for robust form handling and integrates seamlessly with backend\nservices to perform CRUD operations. This component ensures a smooth\nuser experience with its responsive design and proper error handling.\n\nDocumentation for create-update-district-dialog.component\n\nThis component is responsible for handling the creation and updating of\ndistrict records within the application. It utilizes Angular\u2019s reactive\nforms and dialog module to provide a user-friendly interface for\nmanaging district data.\n\nComponent Structure\n\nHTML Template\n\nThe HTML file defines the structure of the dialog used for creating or\nupdating districts. It includes a form with input fields and buttons for\nsubmitting the form or canceling the operation.\n\nKey Sections\n\n1.  Dialog Title\n    -   Displays either \u201cCreate District\u201d or \u201cUpdate District\u201d based on\n        the mode of operation.\n    -   Utilizes Angular\u2019s *ngIf directive to toggle between creation\n        and update modes.\n2.  Loading State\n    -   A loading spinner is displayed when the component is in a\n        loading state, i.e., when an HTTP request is being processed.\n\n        <div class": null,
    " columns: displayedColumns\"></tr>\n        </table>\n      </div>\n      <mat-paginator [length]": null,
    "\n    import { Sort } from '@angular/material/sort'": null,
    "\n    import { MatTableDataSource } from '@angular/material/table'": null,
    "\n    import { AuthService, HttpService, PdfConverterService, SweetAlertService } from 'src/app/core-module'": null,
    "\n    import { CreateUpdateDistrictDialogComponent } from '../dialog/create-update-district-dialog/create-update-district-dialog.component'": null,
    "\n    import Swal from 'sweetalert2'": null,
    "\n\nInterfaces\n\nThe file defines two interfaces for type safety:\n\n-   TableData: Represents the structure of data used in the table.\n-   ApiResponse<T>: Represents the structure of the response from the\n    API.\n\n    interface TableData {\n      _id: string": null,
    "\n      name: string": null,
    "\n    }\n\n    interface ApiResponse<T> {\n      data: T[]": null,
    "\n      totalDocs: 0": null,
    "\n      totalPages: 0": null,
    "\n      currentPage: 0": null,
    "\n    }\n\nComponent Decorator\n\n-   Selector: app-districts\n-   Template: ./districts.component.html\n-   Style: ./districts.component.scss\n\n    @Component({\n      selector: 'app-districts',\n      templateUrl: './districts.component.html',\n      styleUrls: ['./districts.component.scss'],\n    })\n\nClass: DistrictsComponent\n\nProperties\n\n-   displayedColumns: Defines the columns to be displayed in the table.\n-   dataSource: Holds the data for the table.\n-   allData: Stores all fetched district data.\n-   totalItems: Total number of district records.\n-   pageSize: Number of items per page.\n-   pageIndex: Current page index.\n-   sortedData: Holds sorted district data.\n-   loading: Indicates loading state.\n\nConstructor\n\nInitializes services and sets up the data source:\n\n    constructor(\n      public dialog: MatDialog,\n      private httpService: HttpService,\n      public authService: AuthService,\n      private sweetAlertService: SweetAlertService,\n      private pdfConverterService: PdfConverterService,\n    ) {\n      this.dataSource ": "new MatTableDataSource<TableData>([])",
    "\n    }\n\nLifecycle Hook: ngOnInit\n\nFetches district data on component initialization.\n\n    ngOnInit(): void {\n      this.fetchData()": null,
    "\n    }\n\nMethods\n\nprintScreen\n\nExports the table data to a PDF file.\n\n    printScreen() {\n      this.pdfConverterService.printTableAsPdf(this.displayedColumns, this.allData, 'district-list.pdf')": null,
    "\n    }\n\ngetColumnValue\n\nReturns the value of a specific column for a given table row.\n\n    getColumnValue(row: any, column: string) {\n      return row[column]": null,
    "\n    }\n\nfetchData\n\nFetches district data from the server and updates the table.\n\n    fetchData(): void {\n      this.loading ": "true",
    "\n      let endpointBase ": "''",
    "\n      if (this.authService.isRole('Admin')) {\n        endpointBase ": "'api/districts'",
    "\n        this.sweetAlertService.showError('Access Denied', 'You do not have the necessary permissions to view this data.')": null,
    "\n        return": null,
    "\n      }\n      const endpoint ": null,
    "\n      this.httpService.get<ApiResponse<TableData[]>>(endpoint).subscribe({\n        next: (response) ": null,
    "\n          this.dataSource.data ": "this.allData",
    "\n          this.sortedData ": "this.allData.slice()",
    "\n          this.totalItems ": "response.totalDocs ? response.totalDocs : 0",
    "\n          this.pageIndex ": "response.currentPage ? response.currentPage - 1 : 0",
    "\n          this.loading ": "false",
    "\n          this.sweetAlertService.showError('Data Fetch Error', error.error.message)": null,
    "\n    }\n\nonPageChange\n\nHandles pagination changes.\n\n    onPageChange(event: any) {\n      this.pageIndex ": "event.pageIndex",
    "\n      this.pageSize ": "event.pageSize",
    "\n      this.fetchData()": null,
    "\n    }\n\nsortData\n\nSorts the data in the table based on a specified column.\n\n    sortData(sort: Sort) {\n      const data ": "this.allData.slice()",
    "\n      if (!sort.active || sort.direction ": null,
    "\n      }\n      this.sortedData ": "data.sort((a: { name: string",
    " }, b: { name: string": null,
    " }) ": null,
    "\n        switch (sort.active) {\n          case 'name': return compare(a.name, b.name, isAsc)": null,
    "\n          default: return 0": null,
    "\n    }\n\nopenDialog\n\nOpens the dialog for creating or updating a district.\n\n    openDialog(district_id?: any): void {\n      const dialogRef ": "this.dialog.open(CreateUpdateDistrictDialogComponent, {\n        data: { district_id: district_id, isEdit: !!district_id },\n      })",
    "\n      dialogRef.afterClosed().subscribe((result) ": null,
    "\n    }\n\nonDeleteDistrict\n\nHandles the deletion of a district with user confirmation.\n\n    onDeleteDistrict(district_id: string) {\n      this.sweetAlertService.showConfirmationDialog().then((isConfirmed) ": null,
    "\n              this.fetchData()": null,
    "\n              Swal.fire({ title: 'Deleted!', text: 'Data deleted.', icon: 'success' })": null,
    "\n            },\n            error: (error) ": null,
    "\n              this.sweetAlertService.showError('Data Deletion Error', error.error.message)": null,
    "\n            },\n          })": null,
    "\n    }\n\nHelper Function: compare\n\nA utility function for sorting strings and numbers.\n\n    function compare(a: number | string, b: number | string, isAsc: boolean) {\n      return (a < b ? -1 : 1) * (isAsc ? 1 : -1)": null,
    "\n    }\n\nSummary\n\nThe DistrictsComponent is a comprehensive component providing CRUD\noperations and data management for districts within an Angular\napplication. It leverages Angular Material for UI components and custom\nservices for data handling and alert notifications.\n\nFeature Module Documentation\n\nThe FeatureModule is an Angular module that encapsulates components,\ndirectives, and imports necessary for the feature functionalities of the\napplication. This module acts as a cohesive unit that provides various\nUI components essential for user interaction and data visualization.\nBelow is a detailed breakdown of the module and its components.\n\nModule Overview\n\nThe FeatureModule imports several essential Angular and custom modules,\ndeclares a range of components and directives, and exports key\ncomponents for use in other parts of the application.\n\nImports\n\n-   CommonModule: Provides common Angular directives such as ngIf and\n    ngFor.\n-   RouterModule: Enables the use of Angular\u2019s routing capabilities\n    within the feature components.\n-   SharedModule: A custom module that likely contains shared services,\n    directives, and components used across the application.\n-   MaterialModule: A custom module that may encapsulate Angular\n    Material components for consistent UI design.\n\nDeclarations\n\nThe FeatureModule declares the following components and directives:\n\n1.  HeaderComponent: Provides the header section of the application,\n    likely including navigation links and branding.\n2.  DashboardComponent: Displays the main dashboard interface,\n    summarizing key data and analytics.\n3.  ConsentFormComponent: Manages the display and submission of consent\n    forms.\n4.  SideNavBarComponent: Implements a side navigation bar for improved\n    user navigation between features.\n5.  ConsentFormsComponent: Displays a list of consent forms, possibly\n    with actions to view, download, or edit.\n6.  SignaturePadDirective: A directive for capturing and managing\n    digital signatures within forms.\n7.  GetStartedComponent: Guides users through the initial steps to begin\n    using the application.\n8.  ConsentFormWithImageComponent: Manages consent forms that include\n    image uploads.\n9.  UsersComponent: Displays and manages user information within the\n    application.\n10. CreateUpdateUserDialogComponent: A dialog component for creating or\n    updating user details.\n11. SchoolsComponent: Displays and manages school-related data.\n12. CreateUpdateSchoolDialogComponent: A dialog component for creating\n    or updating school details.\n13. DistrictsComponent: Displays and manages district-related data.\n14. CreateUpdateDistrictDialogComponent: A dialog component for creating\n    or updating district details.\n15. CaptureImageComponent: Facilitates image capture through a dialog\n    interface, possibly for adding images to forms.\n16. PrintConsentFormComponent: Provides functionality to print consent\n    forms.\n17. ReportsComponent: Displays analytical reports or data summaries.\n18. ImageUploadComponent: Manages image uploads and displays within\n    forms.\n\nExports\n\nThe module exports several key components to be used in other modules:\n\n-   HeaderComponent: Ensures the header is accessible throughout the\n    application.\n-   DashboardComponent: Allows the dashboard to be incorporated into\n    other modules or components.\n-   SideNavBarComponent: Provides consistent navigation across different\n    application sections.\n-   ConsentFormsComponent: Enables the consent form list to be included\n    in various parts of the application.\n-   GetStartedComponent: Facilitates user onboarding across different\n    views.\n\nSummary\n\nThe FeatureModule is a comprehensive module that consolidates various\ncomponents and directives needed for handling user interactions, data\nmanagement, and UI navigation within the application. It leverages\nAngular\u2019s modular structure to provide a clean and maintainable\ncodebase, ensuring that each component is focused on a specific\nfunctionality, thus promoting reusability and scalability.\n\nBy organizing related components and services into a feature module, the\napplication can easily manage and extend functionalities without\nintertwining unrelated components, adhering to Angular\u2019s best practices\nfor application structure.\n\nget-started.component.html Documentation\n\nThis document provides a detailed explanation of the\nget-started.component.html file which is part of an Angular application.\nThis HTML file serves as a simple interface for users to quickly\nnavigate to the Dashboard or the Consent Form section.\n\nOverview\n\nThe get-started.component.html is designed with a loading indicator and\ntwo primary navigation buttons. It is structured using Angular Material\ncomponents to provide a consistent and professional look and feel.\n\nHTML Structure\n\nHere\u2019s a breakdown of the HTML file\u2019s structure:\n\n    <!-- Loading Component -->\n    <div class": null,
    "\n          })": null,
    "\n        }\n\n    -   Uses layoutService.isHandset() to determine if the view is on a\n        handset device, updating isMobileView accordingly.\n\n-   ngOnDestroy: Cleans up the subscription to prevent memory leaks.\n\n        ngOnDestroy(): void {\n          if (this.screenSizeSubscription) {\n            this.screenSizeSubscription.unsubscribe()": null,
    "\n          }\n        }\n\nKey Features\n\n-   Responsive Design: The component listens for changes in device type\n    and adapts the UI for mobile or desktop views.\n-   Loading State Management: Although not utilized in this example, the\n    loading flag is set up to manage asynchronous operations\n    effectively.\n\nUsage\n\nThe GetStartedComponent serves as a simple entry point for users, with\nbuttons leading to various sections of the application. It ensures\nresponsiveness and maintains a clean user experience by adjusting the\nlayout based on the device\u2019s characteristics.\n\nOverall, the component is a straightforward implementation that\nleverages Angular\u2019s capabilities for responsive design and state\nmanagement.\n\nHeader Component HTML Documentation\n\nThis document provides an overview of the header.component.html file,\nwhich is responsible for rendering the header section of the\napplication. The header includes different elements for both desktop and\nmobile views.\n\nOverview\n\nThe header component uses Angular Material\u2019s mat-toolbar to provide a\nresponsive toolbar that adapts to different screen sizes. It includes a\ncompany logo and conditional elements that are displayed based on the\nuser\u2019s authentication status.\n\nStructure\n\nDesktop Toolbar\n\n-   Element: <mat-toolbar class": null,
    "\n        })": null,
    "\n    }\n\nngOnDestroy()\n\nCleans up the component by unsubscribing from the screen size\nsubscription to prevent memory leaks.\n\n    ngOnDestroy(): void {\n        if (this.screenSizeSubscription) {\n            this.screenSizeSubscription.unsubscribe()": null,
    "\n        }\n    }\n\nonToggleSidebar()\n\nToggles the visibility of the sidebar. This method is typically used in\nmobile views to provide a collapsible navigation menu.\n\n    onToggleSidebar() {\n        this.sideNavBarService.toggleSidebar()": null,
    "\n    }\n\ngoTo(target: string)\n\nNavigates to a specified route within the application.\n\n    goTo(target ": "'') {\n        this.router.navigateByUrl(`/${target}`)",
    "\n    }\n\nUsage\n\nThe HeaderComponent is primarily used for rendering the application\u2019s\nheader. It dynamically adjusts its layout based on the screen size, and\nit provides navigation capabilities and user authentication actions\n(e.g., logout).\n\nExample\n\nHere\u2019s how you might include the HeaderComponent in a template:\n\n    <app-header></app-header>\n\nThis component ties into the larger application structure to provide a\ncohesive and responsive user experience. It\u2019s a critical part of the\napplication\u2019s navigation and layout management.\n\nModule Index Documentation\n\nThis file, index.ts, serves as a centralized export hub for various\ncomponents within a particular directory structure of an Angular\napplication. It facilitates easy and organized imports across different\nmodules by providing a single point from which multiple components and\nmodules can be imported. Below is a detailed explanation of each export\nstatement, which provides insights into the components being exported.\n\nExports\n\nHeader Component\n\n    export * from './header/header.component'": null,
    "\n\n-   Path: ./header/header.component\n-   Description: Exports everything from the header.component.ts file.\n    This component typically handles the header section of the\n    application, including navigation and branding elements.\n\nDashboard Component\n\n    export * from './dashboard/dashboard.component'": null,
    "\n\n-   Path: ./dashboard/dashboard.component\n-   Description: Exports everything from the dashboard.component.ts\n    file. This component is responsible for the main user interface\n    where users can access various features and data pertinent to the\n    application\u2019s purpose.\n\nConsent Form Component\n\n    export * from './consent-form/consent-form.component'": null,
    "\n\n-   Path: ./consent-form/consent-form.component\n-   Description: Exports everything from the consent-form.component.ts\n    file. This component likely deals with displaying and managing\n    consent forms within the application.\n\nSide Navigation Bar Component\n\n    export * from './side-nav-bar/side-nav-bar.component'": null,
    "\n\n-   Path: ./side-nav-bar/side-nav-bar.component\n-   Description: Exports everything from the side-nav-bar.component.ts\n    file. This component manages the side navigation functionality,\n    allowing users to navigate through different sections of the\n    application easily.\n\nConsent Forms Component\n\n    export * from './consent-forms/consent-forms.component'": null,
    "\n\n-   Path: ./consent-forms/consent-forms.component\n-   Description: Exports everything from the consent-forms.component.ts\n    file. This component handles the listing and possibly the management\n    of multiple consent forms.\n\nConsent Form with Image Component\n\n    export * from './consent-form-with-image/consent-form-with-image.component'": null,
    "\n\n-   Path: ./consent-form-with-image/consent-form-with-image.component\n-   Description: Exports everything from the\n    consent-form-with-image.component.ts file. This component likely\n    provides functionality for managing consent forms that include image\n    uploads or image functionalities.\n\nGet Started Component\n\n    export * from './get-started/get-started.component'": null,
    "\n\n-   Path: ./get-started/get-started.component\n-   Description: Exports everything from the get-started.component.ts\n    file. This component might serve as an introductory or onboarding\n    interface for new users.\n\nPrint Consent Form Component\n\n    export * from './print-consent-form/print-consent-form.component'": null,
    "\n\n-   Path: ./print-consent-form/print-consent-form.component\n-   Description: Exports everything from the\n    print-consent-form.component.ts file. This component likely\n    facilitates printing functionalities for consent forms.\n\nImage Upload Component\n\n    export * from './consent-form-with-image/image-upload/image-upload.component'": null,
    "\n\n-   Path: ./consent-form-with-image/image-upload/image-upload.component\n-   Description: Exports everything from the image-upload.component.ts\n    file. This component provides functionality for uploading images,\n    specifically within the context of consent forms.\n\nUsers Component\n\n    export * from './users/users/users.component'": null,
    "\n\n-   Path: ./users/users/users.component\n-   Description: Exports everything from the users.component.ts file.\n    This component is likely used to manage user-related\n    functionalities, such as listing and editing user information.\n\nSchools Component\n\n    export * from './schools/schools/schools.component'": null,
    "\n\n-   Path: ./schools/schools/schools.component\n-   Description: Exports everything from the schools.component.ts file.\n    This component might be used for managing school information within\n    the application.\n\nDistricts Component\n\n    export * from './districts/districts/districts.component'": null,
    "\n\n-   Path: ./districts/districts/districts.component\n-   Description: Exports everything from the districts.component.ts\n    file. This component is likely involved in managing districts, which\n    could be geographical or organizational divisions within the\n    application.\n\nReports Component\n\n    export * from './reports/reports.component'": null,
    "\n\n-   Path: ./reports/reports.component\n-   Description: Exports everything from the reports.component.ts file.\n    This component is likely responsible for generating and displaying\n    reports based on data within the application.\n\nSummary\n\nThis index.ts file plays a crucial role in maintaining a scalable and\nmaintainable codebase by reducing the complexity of import statements\nacross the application. It allows developers to import multiple\ncomponents from a single module, simplifying the import process and\nimproving code readability.\n\nPrintConsentFormComponent Documentation\n\nOverview\n\nThe PrintConsentFormComponent is an Angular component responsible for\ndisplaying and allowing the printing of a consent form. It retrieves the\ndata of a specific consent form from the server and provides\nfunctionalities to format and print the form as a PDF document.\n\nComponent Details\n\nDecorator\n\n    @Component({\n      selector: 'app-print-consent-form',\n      templateUrl: './print-consent-form.component.html',\n      styleUrls: ['./print-consent-form.component.scss'],\n    })\n\n-   Selector: app-print-consent-form\n-   Template: print-consent-form.component.html\n-   Styles: print-consent-form.component.scss\n\nInterfaces\n\n    interface ApiResponse<T> {\n      data: T": null,
    "\n    }\n\n-   ApiResponse: Generic interface for API responses, ensuring data\n    consistency across HTTP service calls.\n\nComponent Class\n\n    export class PrintConsentFormComponent implements OnInit, OnDestroy {\n      formId!: string": null,
    "\n      screenSizeSubscription!: Subscription": null,
    "\n      loading ": "true",
    "\n      isMobileView!: boolean": null,
    "\n      formData: any ": "{}",
    "\n      adminSignature ": "''",
    "\n\n-   formId: Captures the unique identifier of the form to be printed.\n-   screenSizeSubscription: Manages subscription for screen size\n    detection.\n-   loading: Boolean flag to indicate loading state.\n-   isMobileView: Boolean flag to determine if the view is for mobile.\n-   formData: Holds the data retrieved for the consent form.\n-   adminSignature: Stores the administrator\u2019s signature in the form\n    data.\n\nConstructor\n\n    constructor(\n      private pdfService: PdfConverterService,\n      private route: ActivatedRoute,\n      private httpService: HttpService,\n      private layoutService: LayoutService,\n      private sweetAlertService: SweetAlertService,\n    ) {}\n\n-   pdfService: Service to handle PDF conversion.\n-   route: ActivatedRoute to access route parameters.\n-   httpService: Custom HTTP service for API calls.\n-   layoutService: Service to determine the device layout.\n-   sweetAlertService: Service to display alerts to the user.\n\nLife Cycle Hooks\n\nngOnInit\n\n    ngOnInit(): void {\n      this.screenSizeSubscription ": null,
    "\n      this.route.params.subscribe((params) ": null,
    "\n        if (this.formId) {\n          this.getConsentFormData(this.formId)": null,
    "\n    }\n\n-   Subscribes to device screen size changes to determine if the view is\n    on a handset.\n-   Retrieves the formId from the route parameters and fetches the\n    corresponding consent form data.\n\nngOnDestroy\n\n    ngOnDestroy(): void {\n      if (this.screenSizeSubscription) {\n        this.screenSizeSubscription.unsubscribe()": null,
    "\n      }\n    }\n\n-   Ensures that the screen size subscription is properly cleaned up to\n    prevent memory leaks.\n\nMethods\n\ngetConsentFormData\n\n    getConsentFormData(formId: string) {\n      this.loading ": "true",
    "\n      this.httpService.get<ApiResponse<{ data: any }>>(`api/get-consent-form/${formId}`).subscribe({\n        next: (response) ": null,
    "\n          this.formData ": "response.data",
    "\n          this.patchValue()": null,
    "\n          this.sweetAlertService.showError('Get Consent Forms Error', error.error.message)": null,
    "\n    }\n\n-   Fetches consent form data using the provided formId.\n-   Updates component state based on API response.\n\npatchValue\n\n    patchValue() {\n      this.formData['dateOfBirth'] ": null,
    "\n      this.formData['administrationDate'] ": null,
    "\n      this.formData['expirationDate'] ": null,
    "\n      this.formData['visPublicationDate'] ": null,
    "\n      this.formData['visGivenDate'] ": null,
    "\n      this.formData['administrationTime'] ": "this.formData.administrationTime ? moment(this.formData.administrationTime, 'HH:mm').format('h:mm A') : 'N/A'",
    "\n      this.adminSignature ": "this.formData.administratorSignature",
    "\n    }\n\n-   Formats date and time fields in formData for display.\n-   Extracts and stores administrator signature.\n\ndownloadAsPDF\n\n    public downloadAsPDF(): void {\n      this.pdfService.printHtmlAsPdf(\n        `#printForm-${this.formData._id}`,\n        `${this.formData.firstName}-${this.formData.lastName}-consent-form`,\n      )": null,
    "\n    }\n\n-   Utilizes PdfConverterService to generate and download a PDF of the\n    consent form.\n\nConclusion\n\nThe PrintConsentFormComponent is designed to manage the view and\ndownload functionality of consent forms as PDFs. It effectively handles\nAPI data retrieval, format conversion, and user interactions, ensuring a\nseamless experience in accessing consent form information.\n\nPrint Consent Form Component Documentation\n\nThis documentation provides an overview and explanation of the\nprint-consent-form.component.html file, which is a part of the Print\nConsent Form component in an Angular application.\n\nOverview\n\nThe Print Consent Form component is designed to display the details of a\nconsent form and provide an option to download it as a PDF. It leverages\nAngular\u2019s templating and Angular Material for UI design.\n\nStructure\n\nThe template file is structured as follows:\n\n-   Loading Indicator: Displays a loading spinner while the data is\n    being fetched.\n-   MatCard: A material card that contains the consent form data in a\n    structured table format.\n\nComponents and Elements\n\n1. Loading Component\n\n    <div class": null,
    "\n    import { MatSort, Sort } from '@angular/material/sort'": null,
    "\n    import { AuthService, CsvExportService, HttpService, LayoutService, SweetAlertService } from 'src/app/core-module'": null,
    "\n    import * as moment from 'moment-timezone'": null,
    "\n\nInterfaces\n\n-   ApiResponse: Describes the API response structure.\n-   TableData: Represents the structure of data displayed in the table.\n-   CsvData: Defines the structure of data exported to CSV.\n\nComponent Decorator\n\n    @Component({\n      selector: 'app-reports',\n      templateUrl: './reports.component.html',\n      styleUrls: ['./reports.component.scss'],\n    })\n\nClass Members\n\nVariables\n\n-   displayedColumns: An array of strings defining the columns displayed\n    in the table.\n-   dataSource: Manages the data source for the Material table.\n-   allData: Holds the full dataset fetched from the server.\n-   sortedData: Contains the currently sorted data.\n-   loading: A boolean flag indicating if data is being loaded.\n-   reportForm: A reactive form group for managing date filters.\n-   screenSizeSubscription: Subscription to manage screen size changes.\n-   isMobileView: Boolean to determine if the view is on a mobile\n    device.\n\nViewChild\n\n-   sort: A reference to the MatSort directive for sorting table data.\n\nConstructor\n\nThe constructor initializes services for handling HTTP requests,\nauthentication, CSV exporting, layout management, and user\nnotifications.\n\nLifecycle Hooks\n\n-   ngOnInit: Initializes components, subscribes to layout changes, and\n    sets up the report form.\n-   ngOnDestroy: Cleans up subscriptions to prevent memory leaks.\n-   ngAfterViewInit: Attaches the sorting functionality to the data\n    table.\n\nMethods\n\ngetColumnValue\n\n    getColumnValue(row: any, column: string)\n\nReturns the value for a given column in the table row. It checks if the\ncolumn is \u2018school\u2019 and returns the school name, else it returns the\ndirect column value.\n\nsearchReport\n\n    searchReport(): void\n\nTriggers data fetching with the current form values.\n\ndownloadCsv\n\n    downloadCsv(): void\n\nConverts the table data into a CSV format and triggers a download for\nthe user.\n\nfetchData\n\n    fetchData(): void\n\nSends a request to fetch data from the server based on the current form\nvalues and role permissions.\n\nonPageChange\n\n    onPageChange(event: any)\n\nHandles pagination changes by re-fetching data.\n\nsortData\n\n    sortData(sort: Sort)\n\nSorts the table data based on user interactions with the column headers.\n\nHelper Functions\n\n-   compare: A utility function to assist with sorting operations.\n\nPermissions\n\nData access is restricted based on user roles managed by the\nAuthService. Admins and RPHNs (Regional Public Health Networks) can\naccess the report data.\n\nError Handling\n\nThe component uses SweetAlertService to display user-friendly error\nmessages when data fetching fails.\n\nThis comprehensive setup ensures that the ReportsComponent not only\ndisplays data but also provides users with tools to interact with and\nexport this data efficiently.\n\nReports Component HTML Documentation\n\nThe reports.component.html file is the template for the Reports\nComponent in an Angular application. This component is designed to\ndisplay reports in a tabular format, allowing users to filter data by\ndate range and download the data as a CSV file. Below is a detailed\nexplanation of the file structure and its functionalities.\n\nOverview\n\nThis file provides the layout and user interface for displaying and\ninteracting with reports. It includes: - Section header - Date range\nfilter - Download options - Data table with sorting and dynamic columns\n\nStructure\n\nSection Header\n\nThe section starts with a header containing the title \u201cReports\u201d and\naction buttons for downloading data.\n\n    <section>\n        <div class": null,
    " columns: displayedColumns\"></tr>\n        </table>\n    </div>\n\nKey Functionalities\n\n-   Date Range Picker: Allows users to filter report data by specifying\n    a date range.\n-   CSV Download: Enables users to download the displayed report data in\n    CSV format.\n-   Dynamic Columns: Displays data columns dynamically based on the\n    displayedColumns array.\n-   Sorting: Provides sorting functionality on each column using Angular\n    Material\u2019s sorting module.\n\nUsage\n\nThis template is designed to work with the Reports Component class\n(reports.component.ts), which defines the logic for fetching and\nprocessing data, handling user interactions, and binding data to the\ntemplate.\n\nEnsure the necessary Angular Material modules and custom services are\nimported in your module to support all functionalities in this template.\n\nDocumentation for create-update-school-dialog.component.ts\n\nThis document provides a detailed explanation of the\ncreate-update-school-dialog.component.ts file. This component is\ndesigned to handle the creation and updating of school entries within a\ndialog interface. The component is part of an Angular application and\nuses reactive forms to manage user input.\n\nTable of Contents\n\n-   Component Overview\n-   Imports\n-   Component Decorator\n-   Class Properties\n-   Constructor\n-   Lifecycle Hooks\n    -   ngOnInit\n    -   ngOnDestroy\n-   Methods\n    -   getSchool\n    -   patchForm\n    -   getAllDistricts\n    -   markAllFieldsTouchedAndDirty\n    -   scrollToFirstInvalidControl\n    -   schoolFormSubmit\n    -   saveForm\n    -   closeDialog\n    -   onCancel\n\nComponent Overview\n\nThe CreateUpdateSchoolDialogComponent is responsible for providing a\nuser interface to create or update school information. It utilizes\nAngular\u2019s reactive forms to manage the form data and validate user input\nbefore submission.\n\nImports\n\n    import { Component, ElementRef, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core'": null,
    "\n\n-   Angular Core: Provides core Angular functionalities such as\n    component lifecycle hooks, dependency injection, and view\n    manipulation.\n-   Reactive Forms: Used for form handling and validation.\n-   Material Dialog: Used to create modals/dialogs in the UI.\n-   RxJS Subscription: Handles subscription management for observables.\n-   Custom Services: Services for HTTP requests, UI layout management,\n    and alert dialogs.\n\nComponent Decorator\n\n    @Component({\n      selector: 'app-create-update-school-dialog',\n      templateUrl: './create-update-school-dialog.component.html',\n      styleUrls: ['./create-update-school-dialog.component.scss'],\n    })\n\n-   Selector: Defines the custom HTML tag for the component.\n-   Template URL: Specifies the HTML template file for the component.\n-   Style URLs: Points to the stylesheet for the component styling.\n\nClass Properties\n\n-   formElement: A reference to the form element in the template.\n-   schoolForm: A FormGroup object representing the form structure.\n-   loading: A boolean flag indicating if a loading operation is in\n    progress.\n-   isMobileView: A boolean flag indicating if the application is in a\n    mobile view.\n-   screenSizeSubscription: Subscription object for handling screen size\n    changes.\n-   districts: An array holding district data.\n-   isEditMode: A boolean flag indicating if the form is in edit mode.\n\nConstructor\n\n    constructor(\n      private fb: FormBuilder,\n      public dialogRef: MatDialogRef<CreateUpdateSchoolDialogComponent>,\n      @Inject(MAT_DIALOG_DATA) public data: any,\n      private httpService: HttpService,\n      private sweetAlertService: SweetAlertService,\n      private layoutService: LayoutService,\n    ) {\n      // Form initialization\n      this.schoolForm ": "this.fb.group({\n        name: ['', Validators.required],\n        district: ['', Validators.required],\n      })",
    "\n\n      // Check if the dialog is in edit mode\n      if (data && data.school_id && data.isEdit) {\n        this.isEditMode ": "true",
    "\n        this.getSchool(data.school_id)": null,
    "\n      }\n    }\n\n-   FormBuilder: Used to initialize the form with controls and\n    validators.\n-   Dialog Reference: Controls the dialog box, allowing it to close or\n    pass data back.\n-   Injected Data: Provides data to the dialog, useful for determining\n    if the dialog is in edit mode.\n-   Custom Services: Used for HTTP requests, showing alerts, and\n    managing layout changes.\n\nLifecycle Hooks\n\nngOnInit\n\n    ngOnInit(): void {\n      this.screenSizeSubscription ": null,
    "\n      this.getAllDistricts()": null,
    "\n    }\n\n-   Subscribes to changes in screen size to adapt the UI for mobile\n    views.\n-   Loads district data when the component initializes.\n\nngOnDestroy\n\n    ngOnDestroy(): void {\n      if (this.screenSizeSubscription) {\n        this.screenSizeSubscription.unsubscribe()": null,
    "\n      }\n    }\n\n-   Unsubscribes from the screen size observable to prevent memory\n    leaks.\n\nMethods\n\ngetSchool\n\nFetches a school\u2019s data by ID and patches the form with the retrieved\ndata.\n\npatchForm\n\n    patchForm(data: any) {\n      this.schoolForm.patchValue({\n        name: data.name,\n        district: data.district,\n      })": null,
    "\n    }\n\n-   Updates the form with the data retrieved from the server.\n\ngetAllDistricts\n\nFetches the list of districts from the server and stores them in the\ndistricts array.\n\nmarkAllFieldsTouchedAndDirty\n\nMarks all form fields as touched and dirty to trigger validation\nmessages.\n\nscrollToFirstInvalidControl\n\nScrolls the view to the first invalid form control to guide the user in\ncorrecting errors.\n\nschoolFormSubmit\n\nValidates and submits the form. If valid, it constructs a payload and\ncalls saveForm.\n\nsaveForm\n\nSends an HTTP request to either create or update a school based on the\nform\u2019s state (edit or create).\n\ncloseDialog\n\nCloses the dialog and optionally passes a message back to the parent\ncomponent.\n\nonCancel\n\nCancels the form submission and closes the dialog.\n\nSummary\n\nThe CreateUpdateSchoolDialogComponent is an Angular component for\nmanaging school data within a dialog interface. It supports both\ncreation and updating of school entries, using reactive forms for\nhandling input validation and submission. The component also adapts its\nlayout based on the screen size to ensure a responsive design.\n\nCreate/Update School Dialog Component Documentation\n\nThe create-update-school-dialog.component.html file is an Angular\ntemplate for a dialog component used to create or update school records\nin an application. This dialog provides a form for inputting school\ndetails and selecting the corresponding district.\n\nOverview\n\nThe component consists of a form that allows users to create or update\nschool information. The form includes fields for the school\u2019s name and\nits associated district. The dialog is designed to be responsive to both\ndesktop and mobile views.\n\nHTML Structure\n\nContainer and Headers\n\n-   Dialog Container: The main wrapper for the dialog content is a div\n    with the class dialog, which serves as the main container for the\n    dialog content.\n-   Title: The title of the dialog is displayed as either \u201cCreate\n    School\u201d or \u201cUpdate School\u201d based on the isEditMode state.\n\n    <h1 mat-dialog-title class": null,
    "\n    import { CreateUpdateSchoolDialogComponent } from '../dialog/create-update-school-dialog/create-update-school-dialog.component'": null,
    "\n\nExplanation\n\n-   Angular Core: Provides the component lifecycle hooks.\n-   Angular Material: Used for dialog and table functionalities.\n-   SweetAlert2: Provides elegant pop-up messages.\n-   Services: Custom services for handling authentication, HTTP\n    requests, PDF conversion, and alerts.\n\nComponent Metadata\n\n    @Component({\n      selector: 'app-schools',\n      templateUrl: './schools.component.html',\n      styleUrls: ['./schools.component.scss'],\n    })\n\n-   Selector: The component\u2019s selector is app-schools.\n-   Template: The HTML template file used is schools.component.html.\n-   Styles: The component\u2019s styles are defined in\n    schools.component.scss.\n\nInterfaces\n\n    interface TableData {\n      _id: string": null,
    "\n      district?: any": null,
    "\n    }\n\nExplanation\n\n-   TableData: Represents the structure of each school record.\n-   ApiResponse: Defines the structure of the API response expected when\n    fetching data.\n\nComponent Class\n\nProperties\n\n    displayedColumns: string[] ": "['action', 'name', 'district']",
    "\n    dataSource: MatTableDataSource<TableData>": null,
    "\n    allData: any ": "[]",
    "\n    totalItems ": "0",
    "\n    pageSize ": "50",
    "\n    pageIndex ": "0",
    "\n    sortedData!: []": null,
    "\n    loading ": "false",
    "\n\n-   displayedColumns: Columns displayed in the table.\n-   dataSource: Holds the data for the table.\n-   allData: Raw data fetched from the server.\n-   totalItems: Total number of items in the dataset.\n-   pageSize: Number of items per page.\n-   pageIndex: Current page index.\n-   sortedData: Data after sorting.\n-   loading: Boolean indicating loading state.\n\nConstructor\n\n    constructor(\n      public dialog: MatDialog,\n      private httpService: HttpService,\n      public authService: AuthService,\n      private sweetAlertService: SweetAlertService,\n      private pdfConverterService: PdfConverterService,\n    ) {\n      this.dataSource ": "new MatTableDataSource<TableData>([])",
    "\n    }\n\nMethods\n\nngOnInit\n\nInitializes the component and fetches the data.\n\n    ngOnInit(): void {\n      this.fetchData()": null,
    "\n    }\n\nprintScreen\n\nPrints the table as a PDF.\n\n    printScreen() {\n      const keyMap ": "{ district: 'name' }",
    "\n      this.pdfConverterService.printTableAsPdf(this.displayedColumns, this.allData, 'schools-list.pdf', keyMap)": null,
    "\n    }\n\ngetColumnValue\n\nGets the value of a column for a specific row.\n\n    getColumnValue(row: any, column: string) {\n      if (column ": null,
    "\n      } else {\n        return row[column]": null,
    "\n      }\n    }\n\nfetchData\n\nFetches the school data from the server.\n\n    fetchData(): void {\n      this.loading ": "true",
    "\n    }\n\nsortData\n\nSorts the data based on the specified column and direction.\n\n    sortData(sort: Sort) {\n      const data ": "this.allData.slice()",
    " district: string": null,
    "\n          case 'district': return compare(a.district, b.district, isAsc)": null,
    "\n    }\n\nopenDialog\n\nOpens a dialog for creating or updating a school.\n\n    openDialog(school_id?: any): void {\n      const dialogRef ": "this.dialog.open(CreateUpdateSchoolDialogComponent, {\n        data: { school_id: school_id, isEdit: !!school_id },\n      })",
    "\n    }\n\nonDeleteSchool\n\nDeletes a school entry upon confirmation.\n\n    onDeleteSchool(school_id: string) {\n      this.sweetAlertService.showConfirmationDialog().then((isConfirmed) ": null,
    "\n              Swal.fire({\n                title: 'Deleted!',\n                text: 'Data deleted.',\n                icon: 'success',\n              })": null,
    "\n    }\n\nUtility Function\n\n    function compare(a: number | string, b: number | string, isAsc: boolean) {\n      return (a < b ? -1 : 1) * (isAsc ? 1 : -1)": null,
    "\n    }\n\nConclusion\n\nThe SchoolsComponent is an essential part of the application, allowing\nusers to manage school data effectively with features like sorting,\nprinting, creating, updating, and deleting records. The integration with\nAngular Material and additional services enhances the functionality and\nuser experience.\n\nDocumentation for schools.component.html\n\nThis document provides an overview and explanation of the\nschools.component.html file, which is used to display and manage a list\nof schools within a web application. The file utilizes Angular Material\ncomponents to create a responsive and interactive table interface.\n\nOverview\n\nThe schools.component.html file is responsible for rendering a user\ninterface that allows users to view, create, update, and delete school\nrecords. It provides a tabular view of the schools\u2019 data and includes\nfunctionalities such as sorting, pagination, and actions like viewing\nand deleting schools.\n\nStructure\n\nThe file is structured with a top-level <section> element containing\nvarious child components and elements. Below is a detailed breakdown of\nthe sections and functionalities:\n\nToolbar\n\n-   Title: Displays the title \u201cSchools\u201d at the top of the page.\n-   Action Buttons: Provides options to download the table as a PDF and\n    to create a new school. These buttons are conditionally displayed\n    based on the length of the allData array.\n\n    <div class": null,
    " columns: displayedColumns\"></tr>\n        </table>\n      </div>\n\nPagination\n\n-   Paginator: Provides pagination controls for navigating through\n    multiple pages of school data. It uses Angular Material\u2019s\n    <mat-paginator> component, supporting custom page sizes.\n\n    <mat-paginator [length]": null,
    "\n    import {\n      HttpService,\n      LayoutService,\n      SweetAlertService,\n    } from 'src/app/core-module'": null,
    "\n\n    interface Payload {\n      name: string": null,
    "\n    }\n\n    @Component({\n      selector: 'app-create-update-district-dialog',\n      templateUrl: './create-update-district-dialog.component.html',\n      styleUrls: ['./create-update-district-dialog.component.scss'],\n    })\n    export class CreateUpdateDistrictDialogComponent implements OnInit, OnDestroy {\n      @ViewChild('formElement', { static: false }) formElement!: ElementRef": null,
    "\n      districtForm: FormGroup": null,
    "\n      isEditMode ": "false",
    "\n\n      constructor(\n        private fb: FormBuilder,\n        public dialogRef: MatDialogRef<CreateUpdateDistrictDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        private httpService: HttpService,\n        private sweetAlertService: SweetAlertService,\n        private layoutService: LayoutService,\n      ) {\n        this.districtForm ": "this.fb.group({\n          name: ['', Validators.required],\n        })",
    "\n\n        if (data && data.district_id && data.isEdit) {\n          this.isEditMode ": "true",
    "\n          this.getDistrict(data.district_id)": null,
    "\n        }\n      }\n\n      ngOnInit(): void {\n        this.screenSizeSubscription ": null,
    "\n      }\n\n      ngOnDestroy(): void {\n        if (this.screenSizeSubscription) {\n          this.screenSizeSubscription.unsubscribe()": null,
    "\n        }\n      }\n\n      getDistrict(district_id: string) {\n        this.loading ": "true",
    "\n        this.httpService.get<{ data: any }>(`api/districts/${district_id}`).subscribe({\n          next: (response) ": "> {\n            this.patchForm(response['data'])",
    "\n          },\n          error: (error) ": null,
    "\n            this.sweetAlertService.showError('Unable to fetch School', error.error.message)": null,
    "\n          },\n        })": null,
    "\n      }\n\n      patchForm(data: any) {\n        this.districtForm.patchValue({\n          name: data.name,\n        })": null,
    "\n        this.loading ": "false",
    "\n      }\n\n      markAllFieldsTouchedAndDirty(formGroup: FormGroup): void {\n        Object.keys(formGroup.controls).forEach((key) ": null,
    "\n          if (control instanceof FormGroup) {\n            this.markAllFieldsTouchedAndDirty(control)": null,
    "\n          } else {\n            control?.markAsTouched()": null,
    "\n            control?.markAsDirty()": null,
    "\n          }\n        })": null,
    "\n      }\n\n      scrollToFirstInvalidControl(): void {\n        const firstInvalidControl: HTMLElement ": "this.formElement.nativeElement.querySelector(\n          'form .ng-invalid'\n        )",
    "\n        if (firstInvalidControl) {\n          firstInvalidControl.scrollIntoView({ behavior: 'smooth', block: 'center' })": null,
    "\n          firstInvalidControl.focus()": null,
    "\n        }\n      }\n\n      districtFormSubmit(): void {\n        this.markAllFieldsTouchedAndDirty(this.districtForm)": null,
    "\n        if (this.districtForm.invalid) {\n          this.scrollToFirstInvalidControl()": null,
    "\n        } else {\n          this.loading ": "true",
    "\n          const formData ": "this.districtForm.value",
    "\n          const payload: Payload ": "{\n            name: formData.name,\n          }",
    "\n          this.saveForm(payload)": null,
    "\n        }\n      }\n\n      saveForm(payload: object) {\n        this.loading ": "true",
    "\n        const apiEndpoint ": "this.isEditMode\n          ? `api/districts/${this.data.district_id}`\n          : 'api/districts'",
    "\n        const httpMethod ": "this.isEditMode ? 'put' : 'post'",
    "\n        const successMessage ": "this.isEditMode ? 'District Updated' : 'New District Created'",
    "\n        const successDescription ": "this.isEditMode ? 'District updated' : 'New District created'",
    "\n        const errorMessage ": "this.isEditMode ? 'Data Update Error' : 'Data Save Error'",
    "\n        this.httpService[httpMethod](apiEndpoint, payload).subscribe({\n          next: () ": null,
    "\n            this.sweetAlertService.showSuccess(successMessage, successDescription)": null,
    "\n            this.closeDialog('Data Save Or Update')": null,
    "\n            this.sweetAlertService.showError(errorMessage, error.error.message)": null,
    "\n      }\n\n      closeDialog(message ": "'') {\n        this.dialogRef.close(message)",
    "\n      }\n\n      onCancel(): void {\n        this.closeDialog()": null,
    "\n      }\n    }\n\nHTML: create-update-district-dialog.component.html\n\nThis HTML file provides the user interface for the\nCreate-Update-District-Dialog component. It includes form fields for\ndistrict name input, and buttons for submitting or canceling the form.\n\n    <div class": null,
    "\n    import {\n      AuthService,\n      SideNavBarService,\n      LayoutService,\n      SweetAlertService,\n    } from 'src/app/core-module'": null,
    "\n    import { MatSidenav } from '@angular/material/sidenav'": null,
    "\n\n    @Component({\n      selector: 'app-side-nav-bar',\n      templateUrl: './side-nav-bar.component.html',\n      styleUrls: ['./side-nav-bar.component.scss'],\n    })\n    export class SideNavBarComponent implements OnInit, OnDestroy {\n      screenSizeSubscription!: Subscription": null,
    "\n      isSidebarOpened!: boolean": null,
    "\n      @ViewChild('sidenav') sidenav!: MatSidenav": null,
    "\n\n      constructor(\n        public authService: AuthService,\n        private sideNavBarService: SideNavBarService,\n        private layoutService: LayoutService,\n        private router: Router,\n        private sweetAlertService: SweetAlertService,\n      ) {}\n\n      ngOnInit(): void {\n        this.layoutService.isHandset$.subscribe((isHandset) ": null,
    "\n          this.isSidebarOpened ": "!isHandset",
    " // Keep sidebar closed on mobile view\n        })": null,
    "\n        this.sideNavBarService.sidebarToggle$.subscribe(() ": ">\n          this.toggleSidebar()\n        )",
    "\n      }\n\n      toggleSidebar() {\n        this.isSidebarOpened ": "!this.isSidebarOpened",
    "\n        }\n      }\n\n      onKeydown(event: KeyboardEvent, url: string): void {\n        if (event.key ": null,
    " // Prevent default behavior for space key\n          this.navigateAndClose(url)": null,
    "\n        }\n      }\n\n      closeSidebar() {\n        if (this.isMobileView) {\n          this.isSidebarOpened ": "false",
    "\n        }\n      }\n\n      navigateAndClose(url: string) {\n        this.router.navigate([url]).then(() ": "> {\n          this.closeSidebar()",
    "\n      }\n\n      logout(): void {\n        this.authService.logout().subscribe({\n          next: () ": null,
    " // Ensure all user data and states are reset\n            })": null,
    "\n          },\n          error: (err) ": "> {\n            console.error('Logout failed', err.error.message)",
    "\n      }\n    }\n\nHTML: side-nav-bar.component.html\n\nThis HTML file provides the structure and layout for the side navigation\nbar. It includes links to various sections of the application and allows\nusers to log out.\n\n    <mat-sidenav-container class": null,
    "\n    }\n\nUsage\n\nTo use the Material Design components in your Angular modules, simply\nimport the MaterialModule:\n\n    import { MaterialModule } from './path-to-material.module'": null,
    "\n\n    @NgModule({\n      imports: [\n        MaterialModule,\n        // other imports\n      ],\n    })\n    export class SomeFeatureModule {}\n\nThis approach ensures that all necessary Material Design components are\nreadily available across the application, promoting modularity and ease\nof maintenance.\n\nDocumentation: app.routing.ts\n\nThis file is responsible for configuring the routing in an Angular\napplication. Routing is a critical aspect of single-page applications,\nallowing users to navigate through different components and views\nseamlessly.\n\nOverview\n\nThe app.routing.ts file defines the application\u2019s routes, including\ntheir paths, associated components, and any guards used to protect\ncertain routes. It also sets router options to enhance the user\nexperience, such as maintaining scroll positions.\n\nKey Components\n\nImports\n\n-   Angular Core & Router:\n    -   ModuleWithProviders, RouterModule, Routes, ExtraOptions are\n        imported to set up the routing.\n-   Environment:\n    -   The environment import is used to determine the default\n        component based on the environment configuration.\n-   Components:\n    -   Various components from different modules (auth-module and\n        feature-module) are imported for routing.\n-   Guards:\n    -   authGuard is used to secure routes, ensuring that only\n        authenticated users can access certain paths.\n\nRouter Options\n\n-   onSameUrlNavigation: Set to 'reload' to allow reloading of the\n    current route.\n-   scrollPositionRestoration: Set to 'enabled' to restore the scroll\n    position on navigation.\n-   anchorScrolling: Enabled to allow scrolling to anchors within the\n    page.\n\nDefault Component\n\nThe default component is set based on the environment configuration: -\nLoginComponent: Used if the default component is set to\n'consent-form-influenza'. - GetStartedComponent: Used otherwise.\n\nRoutes Configuration\n\nThe routes array defines the path-to-component mappings:\n\nRoot Redirection\n\n-   Redirects from '' to '/'.\n\nBasic Layout\n\n-   Component: BasicLayoutComponent\n-   Guard: authGuard (applies to child routes)\n-   Child Routes:\n    -   login: Renders LoginComponent.\n    -   password-reset: Renders PasswordResetComponent.\n    -   password-reset/:token: Renders PasswordResetComponent with a\n        token parameter.\n    -   consent-form-influenza: Renders ConsentFormComponent.\n\nSide Navigation Layout\n\n-   Component: SideNavLayoutComponent\n-   Guard: authGuard (applies to child routes)\n-   Child Routes:\n    -   dashboard: Renders DashboardComponent.\n    -   forms: Renders ConsentFormsComponent.\n    -   consent-form/:id: Renders ConsentFormComponent with an ID\n        parameter.\n    -   image-consent-form/create: Renders\n        ConsentFormWithImageComponent.\n    -   image-consent-form/create-and-complete: Renders\n        ConsentFormWithImageComponent.\n    -   consent-form/update/:form_id: Renders\n        ConsentFormWithImageComponent for updating forms.\n    -   print-form/:formId: Renders PrintConsentFormComponent.\n    -   users: Renders UsersComponent.\n    -   schools: Renders SchoolsComponent.\n    -   districts: Renders DistrictsComponent.\n    -   reports: Renders ReportsComponent.\n\nFallback\n\n-   Any unspecified path ('**') redirects to login.\n\nExport\n\nThe routing constant is exported using RouterModule.forRoot(), which\ninitializes the router with the defined routes and options.\n\nConclusion\n\nThis routing configuration enables a structured navigation throughout\nthe application, ensuring that users are directed to the appropriate\ncomponents based on their actions and authentication status. By using\nguards and setting router options, the application can maintain a smooth\nand secure user experience.\n\nCapitalizeFirstPipe Documentation\n\nOverview\n\nThe CapitalizeFirstPipe is an Angular pipe designed to transform\ncamelCase strings into a more human-readable format by splitting words\nand capitalizing the first letter of the resulting sentence. This pipe\nis particularly useful for formatting component names or data properties\nthat follow camelCase naming conventions, making them more\nunderstandable in the user interface.\n\nUsage\n\nThis pipe can be used in Angular templates to transform and display\ncamelCase strings into a more readable format. It can be applied\ndirectly within interpolation or attribute bindings in your HTML\ntemplates.\n\nExample\n\n    <p>{{ 'camelCaseExample' | capitalizeFirst }}</p>\n\nThe above usage will transform and display as: Camel Case Example.\n\nImplementation Details\n\nPipe Definition\n\n    import { Pipe, PipeTransform } from '@angular/core'": null,
    "\n\n    @Pipe({ name: 'capitalizeFirst' })\n    export class CapitalizeFirstPipe implements PipeTransform {\n      transform(value: string): string {\n        if (!value) return value": null,
    "\n        \n        // Split the camelCase into separate words\n        const result ": "value.replace(/([A-Z])/g, ' $1')",
    "\n        \n        // Capitalize the first letter of the result\n        const capitalized ": "result.charAt(0).toUpperCase() + result.slice(1)",
    "\n        return capitalized": null,
    "\n      }\n    }\n\nKey Functionalities\n\n-   Splitting CamelCase: The pipe uses a regular expression to identify\n    uppercase letters within a string and inserts a space before each\n    one. This effectively splits the camelCase string into separate\n    words.\n-   Capitalization: After splitting, the first letter of the entire\n    result is capitalized to ensure proper sentence casing.\n-   Handling Edge Cases: If the input value is null or an empty string,\n    the pipe simply returns the value without any transformation.\n\nBenefits\n\n-   Readability: Makes camelCase strings more user-friendly by adding\n    spaces and capitalizing the first letter.\n-   Reusability: Can be reused across multiple components and templates\n    within the Angular application.\n-   Simplicity: Provides a simple and effective way to enhance the\n    presentation of camelCase data properties in the UI.\n\nConclusion\n\nThe CapitalizeFirstPipe is a handy tool for formatting camelCase strings\ninto a more understandable format. It is easy to use and integrate into\nAngular applications, enhancing the clarity of displayed data with\nminimal effort.\n\nDocumentation for format-datepicker.ts\n\nThis documentation provides an overview and explanation of the\nformat-datepicker.ts file, which customizes the date formats used in\nAngular Material datepickers. This file is crucial for applications that\nrequire custom date formats when using Angular Material\u2019s datepicker\ncomponent.\n\nOverview\n\nThe format-datepicker.ts consists of a custom date adapter class named\nAppDateAdapter that extends the NativeDateAdapter provided by Angular\nMaterial. This extension allows for custom formatting of dates,\nspecifically for display in input fields. The file also defines a set of\ndate formats under the constant APP_DATE_FORMATS.\n\nCode Breakdown\n\nImport Statements\n\n-   NativeDateAdapter and MatDateFormats: These are imported from\n    @angular/material/core and are essential for creating a custom date\n    adapter.\n-   Injectable: Imported from @angular/core, this decorator marks the\n    AppDateAdapter as a service that can be injected into other parts of\n    the application.\n\nCustom Date Adapter: AppDateAdapter\n\n    @Injectable()\n    export class AppDateAdapter extends NativeDateAdapter {\n      override format(date: Date, displayFormat: string): string {\n        if (displayFormat ": null,
    "\n          day ": "+day < 10 ? '0' + day : day",
    "\n          let month: string ": "(date.getMonth() + 1).toString()",
    "\n          month ": "+month < 10 ? '0' + month : month",
    "\n          const year ": "date.getFullYear()",
    "\n          return `${month}/${day}/${year}`": null,
    "\n        }\n        return date.toDateString()": null,
    "\n      }\n    }\n\n-   Purpose: The AppDateAdapter class is responsible for overriding the\n    default format method of the NativeDateAdapter.\n-   Method - format:\n    -   Parameters:\n        -   date: Date: The date object to be formatted.\n        -   displayFormat: string: The format type, which in this\n            implementation, checks specifically for the \u2018input\u2019 format.\n    -   Functionality:\n        -   When the displayFormat is \u2018input\u2019, the date is formatted as\n            MM/DD/YYYY.\n        -   If the displayFormat is not \u2018input\u2019, it defaults to using\n            the Date.toDateString() method.\n\nDate Format Constants: APP_DATE_FORMATS\n\n    export const APP_DATE_FORMATS: MatDateFormats ": "{\n      parse: {\n        dateInput: { month: 'short', year: 'numeric', day: 'numeric' },\n      },\n      display: {\n        dateInput: 'input',\n        monthYearLabel: { year: 'numeric', month: 'numeric' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n      },\n    }",
    "\n\n-   Purpose: The APP_DATE_FORMATS constant defines custom parsing and\n    display formats for dates.\n-   Structure:\n    -   parse: Specifies how the date input should be parsed. Here, it\u2019s\n        set to use a short month, numeric year, and numeric day.\n    -   display: Specifies various display formats:\n        -   dateInput: Uses \u2018input\u2019 which refers to the custom format\n            defined in AppDateAdapter.\n        -   monthYearLabel, dateA11yLabel, monthYearA11yLabel: These\n            provide custom formats for accessibility and month/year\n            label display.\n\nUsage\n\nTo use these custom date formats, you need to provide the AppDateAdapter\nand APP_DATE_FORMATS in your Angular module where you configure Angular\nMaterial\u2019s datepicker.\n\n    import { APP_DATE_FORMATS, AppDateAdapter } from './path-to/format-datepicker'": null,
    "\n\n    @NgModule({\n      providers: [\n        { provide: DateAdapter, useClass: AppDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: APP_DATE_FORMATS },\n      ],\n    })\n    export class YourModule {}\n\nConclusion\n\nThe format-datepicker.ts file is a straightforward yet powerful\nconfiguration for managing date formats in Angular Material\napplications. By customizing date display formats, it enhances user\nexperience and ensures that date inputs align with project requirements.\n\nDocumentation for shared.module.ts\n\nThis document provides a comprehensive overview and understanding of the\nshared.module.ts file, which is part of an Angular application. This\nmodule aggregates and exports common functionalities and utilities that\nare reusable across different parts of the application.\n\nOverview\n\nThe SharedModule is designed to contain and export common components,\ndirectives, and pipes that are shared across multiple modules in the\napplication. This helps in maintaining DRY (Don\u2019t Repeat Yourself)\nprinciples by centralizing commonly used code.\n\nImports\n\nBelow is a table summarizing the different modules and components\nimported into the SharedModule:\n\n  -------------------------------------------------------------------------------\n  Module/Component           Description\n  -------------------------- ----------------------------------------------------\n  CommonModule               Provides common directives like ngIf and ngFor.\n\n  FormsModule                Angular module for template-driven forms.\n\n  ReactiveFormsModule        Angular module for reactive forms.\n\n  MatToolbarModule           Provides Angular Material toolbar component.\n\n  MatIconModule              Provides Angular Material icon component.\n\n  MatButtonModule            Provides Angular Material button component.\n\n  MatMenuModule              Provides Angular Material menu component.\n\n  MatProgressSpinnerModule   Provides Angular Material progress spinner\n                             component.\n\n  MatInputModule             Provides Angular Material input component.\n\n  MaterialModule             Custom module encapsulating Angular Material modules\n                             for streamlined imports.\n\n  AppDateAdapter             Custom date adapter for date formatting.\n\n  APP_DATE_FORMATS           Custom date formats for date input and display.\n\n  DateAdapter &              Angular tokens for providing custom date adapter and\n  MAT_DATE_FORMATS           formats.\n  -------------------------------------------------------------------------------\n\nDeclarations\n\nComponents\n\n-   HeaderComponent: A component that likely serves as the header across\n    different views in the application. It might include navigation\n    links, branding, or user account controls.\n\n-   LoadingComponent: A reusable component that represents a loading\n    spinner or indicator, useful for showing loading states.\n\nPipes\n\n-   CapitalizeFirstPipe: A custom pipe that capitalizes the first letter\n    of a given input string. It helps in formatting text uniformly\n    across the application.\n\nProviders\n\n-   DateAdapter: Uses the custom AppDateAdapter class for handling date\n    formatting. It overrides the default date adapter provided by\n    Angular Material.\n\n-   MAT_DATE_FORMATS: Uses the custom date formats defined in\n    APP_DATE_FORMATS for displaying and parsing dates.\n\nExports\n\nThe SharedModule exports the following modules and components for use in\nother modules:\n\n-   Common Angular modules like CommonModule, ReactiveFormsModule, and\n    FormsModule.\n-   Angular Material components for toolbars, buttons, menus, and\n    inputs.\n-   Custom components like LoadingComponent.\n-   The CapitalizeFirstPipe for use in templates throughout the\n    application.\n\nSummary\n\nThe SharedModule is a fundamental part of the application, providing a\ncentralized collection of reusable components, pipes, and utilities. By\nexporting commonly used modules and functionalities, it promotes code\nreuse and consistency across the application. This setup not only\nsimplifies imports in other modules but also ensures that shared logic\nis maintained in a single place, thereby enhancing maintainability and\nreducing redundancy.\n\nDocumentation for header.component.ts\n\nThe header.component.ts file is an Angular component that defines the\nlogic and metadata for the header section of the application. This\ncomponent is part of the shared module and is used to display the header\nacross the application.\n\nOverview\n\nThe header component acts as a reusable UI component that can be\nincluded in different parts of the application to provide a consistent\ntop navigation bar or header section.\n\nComponent Decorator\n\nThe @Component decorator is used to define the metadata for the\ncomponent. It specifies the selector, template URL, and style URLs for\nthe component.\n\n    @Component({\n      selector: 'app-header',\n      templateUrl: './header.component.html',\n      styleUrls: ['./header.component.scss'],\n    })\n\nProperties of the Decorator\n\n-   selector: 'app-header'\n    This defines the custom HTML tag that can be used in the templates\n    to include this component.\n\n-   templateUrl: './header.component.html'\n    Specifies the path to the HTML template file for the component. This\n    file contains the structure and layout of the header.\n\n-   styleUrls: ['./header.component.scss']\n    Specifies the path to the SCSS file that contains the styles for the\n    header component. This allows the component to have its own styling.\n\nComponent Class\n\nThe HeaderComponent class is very straightforward in this context as it\ncurrently does not contain any properties, methods, or lifecycle hooks.\n\n    export class HeaderComponent {}\n\nKey Points\n\n-   Simple Structure: The HeaderComponent class doesn\u2019t have any logic,\n    indicating that all the necessary functionalities are either handled\n    by other components, services, or it\u2019s simply a presentational\n    component at the moment.\n\n-   Reusability: This component can be easily reused across different\n    parts of the application to display a consistent header.\n\nUsage\n\nTo use the HeaderComponent in any Angular template, you can simply\ninclude its selector in the HTML:\n\n    <app-header></app-header>\n\nThis will render the header as defined in the header.component.html file\nwith styles applied from header.component.scss.\n\nConclusion\n\nThe HeaderComponent serves as a foundational part of the application\u2019s\nUI, providing a consistent header across various pages. It leverages\nAngular\u2019s component architecture to encapsulate the header\u2019s structure,\nstyling, and potential functionality, making it easy to manage and reuse\nthroughout the application.\n\nDocumentation for header.component.html\n\nThe Header Component serves as the top navigation bar of the application\ninterface, providing users with easy access to various functionalities.\nHere\u2019s a detailed breakdown of the structure and functionality of the\nheader.component.html file.\n\nOverview\n\nThis component utilizes Angular Material\u2019s MatToolbar to offer a\nconsistent, responsive, and aesthetically pleasing header for the\napplication. It includes navigation buttons, a logo, and user\ninteraction elements like menus.\n\nStructure\n\nBelow is a detailed explanation of the HTML elements and their purposes:\n\nHTML Elements\n\n    <mat-toolbar\n      class": null,
    "\n\n      // Assume fetchData() is a method that fetches data from a server\n      fetchData() {\n        // Simulate async operation\n        setTimeout(() ": null,
    "\n        }, 3000)": null,
    "\n      }\n    }\n\nDesign Considerations\n\n-   Accessibility: Use ARIA roles and attributes if necessary to ensure\n    that the loading component is accessible to all users, including\n    those using assistive technologies.\n-   \n\nLoading Component HTML Documentation\n\nThe loading.component.html file defines the structure for a loading\nspinner component in an Angular application. This component is used to\nvisually indicate to users that a process or page is loading. Below,\nyou\u2019ll find a detailed explanation of its structure and functionality.\n\nOverview\n\nThe loading component consists of a single div element that\nconditionally applies a CSS class based on the component\u2019s fullScreen\nproperty. Within this div, there is a Material Design progress spinner\nthat serves as the visual indicator of loading.\n\nHTML Structure\n\n    <div [ngClass]": null,
    "\n\nConclusion\n\nThe ConsentForm.js file plays a crucial role in modeling the data\nstructure for consent forms within the application. It ensures that all\nnecessary fields are included and provides a framework for interacting\nwith this data in a structured and consistent manner. This schema is\nintegral to managing health-related information and supporting the\noverall functionality of the backend system. \ud83c\udfeb\ud83d\udc89\n\nDocumentation for MedicalProfessional.js \ud83d\udcc4\n\nOverview\n\nThe MedicalProfessional.js file is part of the backend system for the\n\u201cWellbility State School Backend\u201d project. It defines the schema and\nmodel for a Medical Professional using MongoDB with Mongoose. The schema\nincludes fields for managing user credentials and associations with a\nPHN (Public Health Nurse). This file also incorporates password hashing\nfunctionality to enhance security.\n\n------------------------------------------------------------------------\n\nTable of Contents\n\n-   Importing Modules\n-   Schema Definition\n-   Middleware\n-   Instance Methods\n-   Exporting the Model\n\n------------------------------------------------------------------------\n\nImporting Modules\n\n    const mongoose ": "require('mongoose')",
    "\n    const bcrypt ": "require('bcryptjs')",
    "\n    const Schema ": "mongoose.Schema",
    "\n\n-   mongoose: A Node.js library that provides a straightforward,\n    schema-based solution to model application data.\n-   bcryptjs: A library to hash passwords, ensuring secure storage.\n\n------------------------------------------------------------------------\n\nSchema Definition\n\nThe MedicalProfessionalSchema defines the structure of a Medical\nProfessional document in MongoDB.\n\n  -------------------------------------------------------------------------------------------\n  Field                  Type                    Description                       Required\n  ---------------------- ----------------------- --------------------------------- ----------\n  username               String                  Unique identifier for the medical Yes\n                                                 professional.                     \n\n  password               String                  Hashed password for               Yes\n                                                 authentication.                   \n\n  email                  String                  Unique email address for          Yes\n                                                 communication.                    \n\n  resetPasswordToken     String                  Token for password reset          No\n                                                 functionality.                    \n\n  resetPasswordExpires   String                  Expiry time for the password      No\n                                                 reset token.                      \n\n  phn                    Schema.Types.ObjectId   Reference to a PHN (Public Health Yes\n                                                 Nurse) object.                    \n  -------------------------------------------------------------------------------------------\n\n    const MedicalProfessionalSchema ": "new Schema({\n      username: { type: String, required: true, unique: true },\n      password: { type: String, required: true },\n      email: { type: String, required: true, unique: true },\n      resetPasswordToken: { type: String },\n      resetPasswordExpires: { type: String },\n      phn: { type: Schema.Types.ObjectId, ref: 'PHN', required: true },\n    })",
    "\n\n------------------------------------------------------------------------\n\nMiddleware\n\nThe schema includes pre-save middleware to hash the password whenever it\nis modified. This enhances security by storing only hashed passwords in\nthe database.\n\n    MedicalProfessionalSchema.pre('save', async function (next) {\n      if (this.isModified('password')) {\n        this.password ": "await bcrypt.hash(this.password, 8)",
    "\n      }\n      next()": null,
    "\n\n-   Pre-save Middleware: Automatically hashes the password before saving\n    the document if the password field is modified.\n\n------------------------------------------------------------------------\n\nInstance Methods\n\nAn instance method comparePassword is provided to compare a plain text\npassword with the hashed password stored in the database.\n\n    MedicalProfessionalSchema.methods.comparePassword ": "async function (password) {\n      return bcrypt.compare(password, this.password)",
    "\n    }": null,
    "\n\n-   comparePassword: Compares a given password with the stored hashed\n    password, using bcrypt for comparison.\n\n------------------------------------------------------------------------\n\nExporting the Model\n\nFinally, the schema is compiled into a model and exported for use within\nthe application.\n\n    module.exports ": "mongoose.model(\n      'MedicalProfessional',\n      MedicalProfessionalSchema,\n    )",
    "\n\n-   Model Export: Allows the MedicalProfessional model to be used in\n    other parts of the application, facilitating CRUD operations on\n    Medical Professional documents.\n\n------------------------------------------------------------------------\n\nConclusion\n\nThe MedicalProfessional.js file plays a crucial role in managing the\nauthentication and identification of medical professionals within the\nsystem. The integration of password hashing ensures that user\ncredentials are stored securely, maintaining the integrity and privacy\nof sensitive information.\n\n\ud83d\udcc4 Documentation for District.js\n\nThis document provides an in-depth overview of the District.js file,\nwhich is part of the Wellbility State School Backend project. This file\nis essential for managing district-related data within the MongoDB\ndatabase using Mongoose, a popular ODM (Object Data Modeling) library\nfor MongoDB and Node.js.\n\n\ud83d\udcda Index\n\n1.  Overview\n2.  Dependencies\n3.  Schema Definition\n4.  Mongoose Paginate Plugin\n5.  Exporting the Model\n\nOverview\n\nThe District.js file is responsible for defining the data model for a\n\u201cDistrict\u201d in the application. This model is used to manage and interact\nwith district data stored in a MongoDB database. Each district has a\nunique name, and the model supports pagination to handle large sets of\ndata efficiently.\n\nDependencies\n\nThe file imports two main dependencies:\n\n    const mongoose ": "require('mongoose')",
    "\n    const mongoosePaginate ": "require('mongoose-paginate-v2')",
    "\n\n-   Mongoose: A library that provides a straightforward, schema-based\n    solution to model application data. It allows defining schemas and\n    interacting with MongoDB database.\n-   Mongoose Paginate: A pagination library for Mongoose that provides\n    pagination capabilities to the data model.\n\nSchema Definition\n\nThe DistrictSchema defines the structure of a district document in the\ndatabase:\n\n    const DistrictSchema ": "new Schema(\n      {\n        name: { type: String, required: true, unique: true },\n      },\n      { timestamps: true },\n    )",
    "\n\n-   name: A required string field that must be unique. It represents the\n    name of the district.\n\n-   timestamps: An option that automatically adds createdAt and\n    updatedAt fields to the schema, storing the creation and update\n    times of each document.\n\nMongoose Paginate Plugin\n\nThe mongoose-paginate-v2 plugin is added to the DistrictSchema to enable\npagination:\n\n    DistrictSchema.plugin(mongoosePaginate)": null,
    "\n\nThis plugin allows for easy implementation of pagination when querying\nthe District model, making it efficient to handle large amounts of data\nby retrieving data in chunks.\n\nExporting the Model\n\nFinally, the model is exported for use in other parts of the\napplication:\n\n    module.exports ": "mongoose.model('District', DistrictSchema)",
    "\n\nThis line creates and exports a Mongoose model named District based on\nthe DistrictSchema. This model can be used to perform CRUD (Create,\nRead, Update, Delete) operations on district documents in the MongoDB\ndatabase.\n\n------------------------------------------------------------------------\n\nThis concludes the documentation for the District.js file. This backend\ncomponent plays a crucial role in managing district data, ensuring data\nintegrity and efficient data retrieval through pagination. \ud83c\udfeb\ud83d\udcca\n\nNurse.js Documentation \ud83d\udcda\ud83e\ude7a\n\nThe Nurse.js file is a part of the Wellbility State School Backend\nproject. This file defines the Nurse model using Mongoose, a popular\nMongoDB object modeling tool designed to work in an asynchronous\nenvironment. The model includes essential fields and functionalities\nrelated to the nurse\u2019s authentication and association with schools.\n\nTable of Contents\n\n-   Overview\n-   Schema Definition\n-   Middleware\n-   Instance Methods\n-   Export\n\nOverview\n\nThe Nurse model is designed to represent nurse users in the system. It\nstores authentication information and associates each nurse with one or\nmore schools. Nurses have unique usernames and emails, and their\npasswords are securely hashed before storage.\n\nSchema Definition\n\nThe schema is defined using Mongoose\u2019s Schema constructor. Below is a\nbreakdown of the fields in the Nurse schema:\n\n  -----------------------------------------------------------------------------------------------------\n  Field Name             Type                Required   Unique   Description\n  ---------------------- ------------------- ---------- -------- --------------------------------------\n  username               String              Yes        Yes      The unique username for the nurse.\n\n  password               String              Yes        No       The nurse\u2019s password, which will be\n                                                                 hashed.\n\n  email                  String              Yes        Yes      The unique email address for the\n                                                                 nurse.\n\n  resetPasswordToken     String              No         No       Token for password reset\n                                                                 functionality.\n\n  resetPasswordExpires   String              No         No       Expiry time for the reset password\n                                                                 token.\n\n  schools                Array of ObjectId   Yes        No       Array of references to the schools the\n                                                                 nurse is associated with.\n  -----------------------------------------------------------------------------------------------------\n\nSchools Association\n\n-   Type: Array of ObjectId\n-   Reference: School\n-   Purpose: To associate a nurse with multiple schools.\n\nMiddleware\n\nA pre-save middleware is used to hash the nurse\u2019s password before saving\nit to the database. This ensures that plaintext passwords are never\nstored directly in the database.\n\n    NurseSchema.pre('save', async function (next) {\n      if (this.isModified('password')) {\n        this.password ": "await bcrypt.hash(this.password, 8)",
    "\n\n-   isModified('password'): Checks if the password has been modified.\n    Hashing is only performed if the password has changed.\n-   bcrypt.hash(this.password, 8): Uses bcrypt to hash the password with\n    a salt factor of 8.\n\nInstance Methods\n\nThe Nurse schema defines an instance method for password comparison:\n\n    NurseSchema.methods.comparePassword ": "async function (password) {\n      return bcrypt.compare(password, this.password)",
    "\n\n-   comparePassword: Compares a given password with the hashed password\n    stored in the database using bcrypt\u2019s compare method. This is\n    typically used during the login process.\n\nExport\n\nFinally, the Nurse model is exported for use in other parts of the\napplication.\n\n    module.exports ": "mongoose.model('Nurse', NurseSchema)",
    "\n\nBy exporting the model, it can be imported and utilized in controllers\nand other modules that handle nurse-related logic and database\noperations.\n\n------------------------------------------------------------------------\n\nThis documentation provides a comprehensive overview of the Nurse.js\nfile, detailing its purpose, schema, methods, and how it fits into the\nlarger application. The structure ensures easy management and retrieval\nof nurse-related data while maintaining security and integrity.\n\nParent.js Documentation \ud83d\udcc4\n\nThe Parent.js file defines the Parent model in the \u201cWellbility State\nSchool Backend\u201d application. This model is used for storing and managing\nthe data related to parents within the system, utilizing Mongoose to\ninteract with a MongoDB database.\n\nOverview \ud83c\udfe1\n\nA Parent is represented by their email and associated links. Links in\nthis context are references to public links that may be related to\nconsent forms or other actions the parent can take.\n\nDetailed Schema Description \ud83e\uddec\n\nImports\n\n    const mongoose ": "require('mongoose')",
    "\n\n-   mongoose: Library for MongoDB object modeling that provides\n    schema-based solutions to model your application data.\n-   Schema: A Mongoose structure that defines the shape of the documents\n    within a collection.\n\nParentSchema Definition\n\n    const ParentSchema ": "new Schema({\n      email: { type: String, required: true, unique: true },\n      links: [{ type: Schema.Types.ObjectId, ref: 'PublicLink' }],\n    })",
    "\n\n-   email:\n\n    -   Type: String\n    -   Required: true\n    -   Unique: true\n    -   Description: The email address of the parent, which is a unique\n        identifier for each parent in the system.\n\n-   links:\n\n    -   Type: Array of Schema.Types.ObjectId\n    -   Reference: PublicLink\n    -   Description: An array of references to the PublicLink model.\n        Each parent can have multiple associated public links.\n\nMongoose Model Export \ud83d\ude80\n\n    module.exports ": "mongoose.model('Parent', ParentSchema)",
    "\n\n-   Purpose: Exports the Parent model, allowing it to be used in other\n    parts of the application to perform database operations related to\n    parents.\n\nUsage Scenarios \ud83c\udfaf\n\nThe Parent model can be used in various scenarios within the\napplication, such as:\n\n-   Registering a new parent with a unique email.\n-   Associating a parent with specific public links, which might be used\n    for consent forms or other parent-specific actions.\n-   Querying for existing parent records to verify their email or\n    retrieve associated links.\n\nThis model plays a crucial role in managing parental data efficiently,\nensuring that each parent\u2019s email is unique and linking them to their\nrelevant actions within the application.\n\nPHN.js Documentation \ud83d\udcc4\u2728\n\nThe PHN.js file defines a Mongoose schema for managing Public Health\nNurse (PHN) records in the Wellbility State School Backend system. This\nschema is used to store and interact with data related to public health\nnurses, which are identified by their unique PHN IDs and associated with\nspecific regions.\n\nTable of Contents \ud83d\udcda\n\n1.  Overview\n2.  Schema Definition\n3.  Fields\n4.  Export\n\nOverview\n\nThis file primarily focuses on defining a Mongoose schema for Public\nHealth Nurses. The schema serves as a blueprint for creating, reading,\nupdating, and deleting PHN records within the MongoDB database.\n\nSchema Definition\n\nThe schema is defined using Mongoose, a popular ODM (Object Data\nModeling) library for MongoDB and Node.js. The PHNSchema defines the\nstructure of a PHN document in the database.\n\nBasic Setup\n\n    const mongoose ": "require('mongoose')",
    "\n\n-   Mongoose: Required for schema creation and database interaction.\n-   Schema: A constructor from Mongoose to define the structure of the\n    document.\n\nPHN Schema\n\n    const PHNSchema ": "new Schema({\n      phnId: { type: String, required: true, unique: true },\n      region: { type: String, required: true },\n    })",
    "\n\nFields\n\nThe schema consists of two fields:\n\n  ---------------------------------------------------------------------------\n  Field    Type     Description                       Constraints\n  -------- -------- --------------------------------- -----------------------\n  phnId    String   The unique identifier for the PHN Required, Must be\n                                                      unique\n\n  region   String   The region associated with the    Required\n                    PHN                               \n  ---------------------------------------------------------------------------\n\n-   phnId: A unique string that identifies the public health nurse. It\n    is a required field and must be unique across all PHN records.\n-   region: A string representing the geographic region the PHN is\n    associated with. This field is required to ensure each PHN is linked\n    to a specific area.\n\nExport\n\nThe PHN model is exported for use in other parts of the application.\n\n    module.exports ": "mongoose.model('PHN', PHNSchema)",
    "\n\n-   module.exports: Exports the compiled model for the schema, allowing\n    other files to interact with the PHN collection in the MongoDB\n    database.\n\nSummary\n\nThe PHN.js file is a critical component of the backend system, enabling\nthe management of public health nurses by defining a clear structure for\ntheir data within the database. This schema ensures that each PHN is\nuniquely identifiable and associated with a specific region,\nfacilitating organized and efficient data handling.\n\nPublicLink.js Documentation\n\nOverview\n\nThe PublicLink.js file defines a Mongoose schema and model for managing\npublic links associated with consent forms. These links allow parents to\naccess specific consent forms, potentially simplifying the process of\nreviewing and signing the forms. This model is an essential part of the\nsystem\u2019s functionality in providing secure and time-bound access to the\nform data.\n\nSchema Definition\n\nThe schema is defined using Mongoose, a MongoDB object modeling tool\ndesigned to work in an asynchronous environment. The PublicLinkSchema\nincludes several fields crucial for linking parents to their respective\nconsent forms via a unique URL.\n\nSchema Fields\n\n  -----------------------------------------------------------------------------------------\n  Field Name      Data Type               Description\n  --------------- ----------------------- -------------------------------------------------\n  parentId        Schema.Types.ObjectId   References the Parent model, linking the public\n                                          link to a specific parent.\n\n  consentFormId   Schema.Types.ObjectId   References the ConsentForm model, linking the\n                                          public link to a specific consent form.\n\n  link            String                  A unique URL string that provides access to the\n                                          consent form.\n\n  expiryTime      Date                    The date and time at which the link expires,\n                                          ensuring time-bound access.\n  -----------------------------------------------------------------------------------------\n\nField Details:\n\n-   parentId: This field is required and acts as a foreign key reference\n    to the Parent model, ensuring that each link is associated with a\n    specific parent.\n\n-   consentFormId: This field is also required and serves as a foreign\n    key reference to the ConsentForm model, linking the public access to\n    a specific consent form.\n\n-   link: This field is required and must be unique across the\n    collection, ensuring that each link is a distinct URL string that\n    can be shared with the parent for accessing the consent form.\n\n-   expiryTime: This field is required and represents the point in time\n    after which the link becomes invalid, providing a security measure\n    to limit unauthorized access over time.\n\nExport\n\nThe schema is exported as a Mongoose model named PublicLink, making it\navailable for use throughout the application where public links are\nmanaged or accessed.\n\n    module.exports ": "mongoose.model('PublicLink', PublicLinkSchema)",
    "\n\nUsage\n\nThe PublicLink model is used to create, read, update, and delete (CRUD)\noperations on public links in the MongoDB database. It plays a critical\nrole in the backend system by facilitating secure, time-limited access\nto consent forms for parents.\n\nSummary\n\nIn summary, PublicLink.js is a crucial component of the backend system,\nproviding the schema necessary for generating and managing public links\nthat connect parents with their children\u2019s consent forms securely and\nefficiently. This functionality is vital for maintaining a seamless flow\nof information and consent between schools and parents.\n\nSchool.js Documentation\n\nOverview\n\nThe School.js file defines the structure of the School model using\nMongoose, a MongoDB object modeling tool designed to work in an\nasynchronous environment. This model is essential for managing\nschool-related data, associating each school with a particular district,\nand supporting pagination for handling large datasets efficiently.\n\nDependencies\n\n-   Mongoose: A MongoDB ODM library for Node.js that allows defining\n    schemas with strongly-typed data.\n-   mongoose-paginate-v2: A pagination plugin for Mongoose that adds\n    pagination capabilities to Mongoose models.\n\nCode Explanation\n\n    const mongoose ": "require('mongoose')",
    "\n\n    const SchoolSchema ": "new Schema(\n      {\n        name: { type: String, required: true, unique: true },\n        district: { type: Schema.Types.ObjectId, ref: 'District' }, // Link to District\n      },\n      { timestamps: true },\n    )",
    "\n\n    SchoolSchema.plugin(mongoosePaginate)": null,
    "\n\n    module.exports ": "mongoose.model('School', SchoolSchema)",
    "\n\nSchema Details\n\n-   name (String):\n\n    -   Type: String\n    -   Required: Yes\n    -   Unique: Yes\n    -   Description: Represents the name of the school. Each school must\n        have a unique name.\n\n-   district (ObjectId):\n\n    -   Type: Schema.Types.ObjectId\n    -   Reference: \u2018District\u2019\n    -   Description: Links the school to a specific district using the\n        district\u2019s ObjectId. This establishes a relation between the\n        School and District collections.\n\nTimestamps\n\nThe { timestamps: true } option automatically adds createdAt and\nupdatedAt fields to the schema. This is useful for keeping track of when\neach document is created and last updated.\n\nPagination\n\nThe mongoosePaginate plugin is applied to the schema, enabling easy\npagination of query results. This is particularly useful for efficiently\nhandling large datasets and implementing features like infinite\nscrolling or paged views in applications.\n\nExport\n\nThe model is exported using:\n\n    module.exports ": "mongoose.model('School', SchoolSchema)",
    "\n\nThis allows the School model to be imported and used in other parts of\nthe application for operations like creating, reading, updating, or\ndeleting school documents in the database.\n\nSummary\n\nThe School.js file effectively sets up a Mongoose model for managing\nschool entities within the application. By linking each school to a\ndistrict and supporting pagination, it ensures that the school data is\nwell-organized and scalable, a crucial aspect for applications dealing\nwith educational institutions.\n\nRole.js Documentation \ud83d\udcdc\n\nOverview\n\nThe Role.js file defines a schema for the Role model using Mongoose, a\npopular ODM (Object Data Modeling) library for MongoDB and Node.js. This\nfile is a crucial part of the backend system that manages user roles and\ntheir associated permissions within the application.\n\nKey Features\n\n-   Role Management: Defines a schema for user roles, allowing for a\n    structured and scalable way to manage different types of user roles\n    in the application.\n-   Permissions Control: Includes an optional permissions array to grant\n    specific permissions to each role, providing a foundation for a\n    granular access control system.\n\nDetailed Description\n\nBelow is a detailed breakdown of the code and its components:\n\nImport Statements\n\n    const mongoose ": "require('mongoose')",
    "\n\n-   Mongoose: The Mongoose library is imported to interact with the\n    MongoDB database.\n-   Schema: A Mongoose Schema is a blueprint for defining the structure\n    of documents within a collection.\n\nRole Schema Definition\n\n    const RoleSchema ": "new Schema(\n      {\n        roleName: { type: String, required: true, unique: true },\n        permissions: [\n          {\n            type: String,\n            required: false,\n          },\n        ],\n      },\n      { timestamps: true },\n    )",
    "\n\n-   roleName: A mandatory and unique field that specifies the name of\n    the role (e.g., \u201cAdmin\u201d, \u201cUser\u201d, \u201cNurse\u201d). This field ensures that\n    each role is identifiable and distinct within the application.\n-   permissions: An optional array of strings, each representing a\n    specific permission that can be assigned to a role (e.g., \u201cread\u201d,\n    \u201cwrite\u201d, \u201cdelete\u201d). This allows for flexible and detailed access\n    control tailored to the requirements of the application.\n-   timestamps: Automatically adds createdAt and updatedAt fields to the\n    schema, which are useful for tracking creation and modification\n    times of each role document.\n\nModel Export\n\n    module.exports ": "mongoose.model('Role', RoleSchema)",
    "\n\n-   The schema is compiled into a Mongoose model named Role. This model\n    provides an interface to interact with the roles collection in\n    MongoDB, allowing CRUD operations to be performed easily on role\n    documents.\n\nConsiderations\n\n-   Granularity: The level of granularity for permissions can be\n    adjusted based on the application needs. The current setup allows\n    for expanding the permissions array with more specific actions or\n    categories.\n-   Scalability: The schema is designed to be scalable, supporting the\n    addition of new roles and permissions as the application evolves.\n\nUsage Example\n\nTo create a new role within the application, you would interact with the\nRole model, like so:\n\n    const Role ": "require('./Role')",
    "\n\n    const newRole ": "new Role({\n      roleName: 'Admin',\n      permissions: ['read', 'write', 'delete'],\n    })",
    "\n\n    newRole\n      .save()\n      .then(() ": null,
    "\n\nThis example demonstrates creating a new role named \u201cAdmin\u201d with\npermissions to \u201cread\u201d, \u201cwrite\u201d, and \u201cdelete\u201d resources.\n\nConclusion\n\nThe Role.js file is essential for managing user roles and permissions,\nproviding a robust framework for access control within the application.\nBy defining roles and their permissions, the system can enforce secure\nand organized user access, ensuring that users can only perform actions\nthey are authorized to do.\n\nFeel free to extend this schema to fit the unique needs of your\napplication, adding more fields or adjusting the permissions structure\nas necessary.\n\nShortForm.js Documentation\n\nOverview\n\nThe ShortForm.js file defines a Mongoose schema and model for handling\nshort forms within the backend system of the Wellbility State School\nproject. This schema is primarily used to manage records related to\nforms filled out by or for students, capturing essential details such as\nthe date of form completion and the associated student.\n\nSchema Definition\n\nImporting Mongoose\n\nThe file begins by importing the mongoose library, which is essential\nfor defining and working with MongoDB schemas in a Node.js environment.\n\n    const mongoose ": "require('mongoose')",
    "\n\nSchema Initialization\n\nA new schema is created using mongoose.Schema. This schema outlines the\nstructure of the short form documents stored in the MongoDB database.\n\n    const Schema ": "mongoose.Schema",
    "\n\nShortFormSchema\n\nThe ShortFormSchema is defined with the following fields:\n\n-   formId: A String field which is not required and not unique. It\n    represents the identifier of the form.\n-   dateFilled: A Date field which is required. This field stores the\n    date on which the form was filled out.\n-   studentId: An ObjectId that references the Student model. This field\n    is required and links the form to a specific student.\n\nThe schema also includes timestamp options to automatically manage\ncreatedAt and updatedAt properties for each document.\n\n    const ShortFormSchema ": "new Schema(\n      {\n        formId: { type: String, required: false, unique: false },\n        dateFilled: { type: Date, required: true },\n        studentId: { type: Schema.Types.ObjectId, ref: 'Student', required: true },\n      },\n      { timestamps: true },\n    )",
    "\n\nModel Export\n\nFinally, the schema is compiled into a Mongoose model named ShortForm,\nwhich is then exported for use in other parts of the application.\n\n    module.exports ": "mongoose.model('ShortForm', ShortFormSchema)",
    "\n\nSummary\n\n-   Purpose: Manages short form records linked to students.\n-   Fields:\n    -   formId: Identifier for the form (optional).\n    -   dateFilled: Date when the form was completed (required).\n    -   studentId: Reference to the student associated with the form\n        (required).\n-   Features: Automatically handles document creation and update\n    timestamps.\n\nThis file is crucial for operations involving short form data within the\napplication, facilitating easy data management and retrieval based on\nstudent associations and form completion dates.\n\nStudent.js Documentation \ud83d\udcda\n\nThe Student.js file defines the Student model using Mongoose, which is\nan Object Data Modeling (ODM) library for MongoDB and Node.js. This\nmodel represents students in the \u201cWellbility State School Backend\u201d\nsystem, capturing essential information about them for school and\nhealth-related management.\n\nSchema Definition\n\nBelow is the schema utilized in the Student.js file:\n\n    const mongoose ": "require('mongoose')",
    "\n\n    const StudentSchema ": "new Schema({\n      studentId: { type: String, required: true, unique: true },\n      school: { type: Schema.Types.ObjectId, ref: 'School', required: true },\n      name: { type: String, required: true },\n      dob: { type: Date, required: true },\n      age: { type: Number, required: true },\n    })",
    "\n\nSchema Fields\n\nHere is a detailed explanation of each field in the StudentSchema:\n\n-   studentId:\n\n    -   Type: String\n    -   Required: Yes\n    -   Unique: Yes\n    -   Description: A unique identifier for each student, ensuring no\n        duplicates exist.\n\n-   school:\n\n    -   Type: ObjectId\n    -   Reference: School\n    -   Required: Yes\n    -   Description: Links each student to a specific school using the\n        school\u2019s unique identifier. This is a reference to the School\n        model, enabling relational data management between students and\n        schools.\n\n-   name:\n\n    -   Type: String\n    -   Required: Yes\n    -   Description: The full name of the student.\n\n-   dob (Date of Birth):\n\n    -   Type: Date\n    -   Required: Yes\n    -   Description: The birthdate of the student, used for age\n        calculation and verification.\n\n-   age:\n\n    -   Type: Number\n    -   Required: Yes\n    -   Description: The age of the student, which can be computed from\n        the dob but is stored separately for quick access and validation\n        purposes.\n\nUsage\n\nThis model is employed in the backend to perform CRUD (Create, Read,\nUpdate, Delete) operations related to student data. It facilitates\nstoring and retrieving student information, ensuring data integrity and\nrelationships through the use of MongoDB\u2019s ObjectId references.\n\nExample Usage\n\n    // Import the Student model\n    const Student ": "require('./Student')",
    "\n\n    // Create a new student record\n    const newStudent ": "new Student({\n      studentId: 'S123456',\n      school: '60d0fe4f5311236168a109ca', // Example ObjectId of a School\n      name: 'John Doe',\n      dob: new Date('2005-06-15'),\n      age: 16,\n    })",
    "\n\n    // Save the student record to the database\n    newStudent\n      .save()\n      .then((student) ": null,
    "\n\nConclusion\n\nThe Student.js file is a critical component of the backend system,\nmodeling the student entity and providing a structured way to handle\nstudent-related data. By leveraging Mongoose, it ensures robust data\nvalidation, unique constraints, and relational mapping within the\nMongoDB database.\n\nToken.js Documentation\n\nOverview\n\nThe Token.js file defines a Token schema using Mongoose for a MongoDB\ncollection. This schema is part of the backend system for managing\ntokens used in user authentication processes. Tokens are critical for\nverifying user sessions and managing password resets or email\nverifications.\n\nSchema Definition\n\nThe schema is defined using Mongoose\u2019s Schema constructor, which is then\nused to create a Mongoose model. Below are the fields defined in the\nTokenSchema:\n\n    const tokenSchema ": "new Schema({\n      userId: {\n        type: Schema.Types.ObjectId,\n        required: true,\n        refPath: 'onModel',\n      },\n      token: {\n        type: String,\n        required: true,\n      },\n      expires: {\n        type: Date,\n        required: true,\n      },\n      onModel: {\n        type: String,\n        required: true,\n        enum: ['MedicalProfessional', 'Nurse', 'User'],\n      },\n      created: {\n        type: Date,\n        default: Date.now,\n      },\n      updated: {\n        type: Date,\n        default: Date.now,\n      },\n    })",
    "\n\nFields\n\n-   userId: An ObjectId that references the user associated with the\n    token. The refPath indicates that it can reference different models\n    (MedicalProfessional, Nurse, or User).\n\n-   token: A String representing the token itself. This is required and\n    is used for validating user sessions.\n\n-   expires: A Date indicating when the token will expire. This is also\n    required to ensure tokens have a limited lifespan for security\n    reasons.\n\n-   onModel: A String that specifies which model the userId is\n    associated with. It is required and can be one of the following:\n\n    -   'MedicalProfessional'\n    -   'Nurse'\n    -   'User'\n\n-   created: A Date indicating when the token was created. It defaults\n    to the current date and time.\n\n-   updated: A Date indicating when the token was last updated. It also\n    defaults to the current date and time.\n\nUsage\n\nTokens are primarily used in authentication workflows for:\n\n-   Session validation: Ensures that users can securely interact with\n    the system across sessions.\n\n-   Password resets: Provides a mechanism to validate password reset\n    requests.\n\n-   Email verification: Helps in verifying the user\u2019s email address as\n    part of the registration or email update process.\n\nExport\n\nThe schema is compiled into a Mongoose model named Token, which is\nexported for use in other parts of the application.\n\n    module.exports ": "mongoose.model('Token', tokenSchema)",
    "\n\nKey Points\n\n-   The Token model is pivotal for managing authentication-related\n    tasks.\n-   It supports different user types (MedicalProfessional, Nurse, User)\n    through dynamic references.\n-   Ensures security with token expiry and creation timestamps.\n\nBy adhering to these practices, the system can maintain secure\nauthentication processes and manage user sessions effectively.\n\nUser.js Documentation \ud83d\udcc4\n\nThis document provides a detailed overview of the User.js file, which is\npart of the Wellbility State School Backend. This file defines the User\nmodel, utilizing the mongoose library to interact with MongoDB, and\nimplements user authentication functionalities.\n\nOverview \ud83e\udde9\n\nThe User.js file is responsible for defining the schema and model of a\nuser in the system. It includes fields for user credentials, roles, and\nassociated entities like schools and districts. The file also contains\nmethods for password management and pagination support.\n\nTable of Contents \ud83d\udcdc\n\n1.  Dependencies\n2.  User Schema\n3.  Plugins\n4.  Methods\n5.  Export\n\nDependencies \ud83d\udce6\n\nThe file imports several modules required for defining the user schema:\n\n-   mongoose: A MongoDB ODM for Node.js that allows defining schemas and\n    models.\n-   bcryptjs: A library to hash and compare passwords for secure\n    authentication.\n-   mongoose-paginate-v2: A pagination plugin for mongoose models.\n\n    const mongoose ": "require('mongoose')",
    "\n\nUser Schema \ud83d\udcd1\n\nThe User schema is defined using mongoose.Schema, which includes several\nfields and references to other models:\n\n  -----------------------------------------------------------------------------------------\n  Field                  Type               Required   Description\n  ---------------------- ------------------ ---------- ------------------------------------\n  username               String             Yes        Unique username for the user.\n\n  email                  String             Yes        Unique email address of the user.\n\n  password               String             Yes        Hashed password for authentication.\n\n  role                   ObjectId           No         Reference to the user\u2019s role in the\n                         (Reference to                 system.\n                         Role)                         \n\n  school                 Array of ObjectId  No         List of schools associated with the\n                         (Ref School)                  user, if applicable.\n\n  district               Array of ObjectId  No         List of districts associated with\n                         (Ref District)                the user, if applicable.\n\n  resetPasswordToken     String             No         Token for password reset\n                                                       functionality.\n\n  resetPasswordExpires   String             No         Expiration time for the password\n                                                       reset token.\n\n  isDeleted              Boolean            No         Indicates if the user account is\n                                                       soft-deleted. Default is false.\n  -----------------------------------------------------------------------------------------\n\n    const UserSchema ": "new Schema(\n      {\n        username: { type: String, required: true, unique: true },\n        email: { type: String, required: true, unique: true },\n        password: { type: String, required: true },\n        role: { type: Schema.Types.ObjectId, ref: 'Role' },\n        school: [{ type: Schema.Types.ObjectId, ref: 'School', required: false }],\n        district: [\n          { type: Schema.Types.ObjectId, ref: 'District', required: false },\n        ],\n        resetPasswordToken: { type: String },\n        resetPasswordExpires: { type: String },\n        isDeleted: { type: Boolean, default: false },\n      },\n      { timestamps: true },\n    )",
    "\n\nPlugins \ud83d\udd0c\n\nPagination\n\nThe mongoose-paginate-v2 plugin is applied to the schema to enable\npagination functionality:\n\n    UserSchema.plugin(mongoosePaginate)": null,
    "\n\nMethods \ud83d\udd0d\n\ncomparePassword\n\nA method for comparing a candidate password with the stored hashed\npassword. It uses bcrypt.compare to ensure secure password verification.\n\n    UserSchema.methods.comparePassword ": "function (candidatePassword) {\n      return bcrypt.compare(candidatePassword, this.password)",
    "\n\nExport \ud83d\udce4\n\nThe file exports the User model, making it available for use in other\nparts of the application.\n\n    module.exports ": "mongoose.model('User', UserSchema)",
    "\n\nSummary \ud83d\udcdd\n\nThe User.js file is crucial for handling user data and authentication\nwithin the Wellbility State School Backend. By leveraging mongoose for\nschema definitions and bcryptjs for password security, it ensures robust\nuser management. The integration of pagination further enhances data\nhandling capabilities, making it a well-rounded component of the system.\n\nConsentFormController.js Documentation \ud83d\udcc4\n\nThe ConsentFormController.js file is a central part of managing consent\nforms in the Wellbility State School Backend system. It provides various\nfunctions for handling consent form data, including creating, updating,\nretrieving, and deleting consent forms. The file also includes\nfunctionality for filtering forms based on certain criteria and\nintegrates email notifications using the SendGrid service.\n\nTable of Contents\n\n1.  Overview\n2.  Functions\n    -   createConsentForm\n    -   getAllConsentForms\n    -   getConsentFormsBySchoolOrDistrict\n    -   getConsentFormById\n    -   updateConsentForm\n    -   updateAdminConsentForm\n    -   createConsentFormWithImage\n    -   updateConsentFormWithImage\n    -   deleteConsentForm\n    -   getConsentFormsByDateAndStatus\n3.  Helper Function\n    -   parseMMDDYYYY\n4.  Dependencies\n\nOverview\n\nThe ConsentFormController.js file is responsible for managing consent\nform operations within the backend. By interfacing with the MongoDB\ndatabase using Mongoose, it allows for CRUD operations and more advanced\ndata retrieval and filtering.\n\nFunctions\n\ncreateConsentForm\n\n-   Purpose: To create a new consent form and send a notification email\n    to the parent if an email address is provided.\n-   Parameters: req, res (Express request and response objects)\n-   Flow:\n    1.  Verify the school exists using schoolId.\n    2.  Create a new consent form with data from the request body.\n    3.  Save the form to the database.\n    4.  If an email is provided, send a notification using SendGrid.\n-   Response: Success message and status code, or error message on\n    failure.\n\ngetAllConsentForms\n\n-   Purpose: Retrieve all consent forms with pagination, filtering by\n    status and search terms, and sorting.\n-   Parameters: req, res\n-   Query Parameters:\n    -   page, limit: For pagination.\n    -   status: Filter by form status.\n    -   search: Search through names, emails, etc.\n    -   sortBy, sortOrder: Sorting criteria.\n-   Response: List of consent forms and metadata about pagination.\n\ngetConsentFormsBySchoolOrDistrict\n\n-   Purpose: Retrieve consent forms related to specific schools or\n    districts, supporting filters and search.\n-   Parameters: req, res\n-   Query Parameters:\n    -   schoolId, districtId: Filter by school or district.\n    -   status, search, sortBy, sortOrder: Additional filters and\n        sorting.\n-   Response: Consent forms matching the criteria or error messages.\n\ngetConsentFormById\n\n-   Purpose: Retrieve a single consent form by its ID.\n-   Parameters: req, res\n-   Response: Consent form data or an error message if not found.\n\nupdateConsentForm\n\n-   Purpose: Update a consent form by its ID.\n-   Parameters: req, res\n-   Response: Success or error message based on the update operation.\n\nupdateAdminConsentForm\n\n-   Purpose: Update administrative fields in a consent form and notify\n    the parent via email.\n-   Parameters: req, res\n-   Response: Success or error message, including email status.\n\ncreateConsentFormWithImage\n\n-   Purpose: Create a new consent form that includes image data.\n-   Parameters: req, res\n-   Response: Success message or error.\n\nupdateConsentFormWithImage\n\n-   Purpose: Update an existing consent form to include image data.\n-   Parameters: req, res\n-   Response: Success message or error.\n\ndeleteConsentForm\n\n-   Purpose: Delete a consent form identified by its ID.\n-   Parameters: req, res\n-   Response: Success message or error.\n\ngetConsentFormsByDateAndStatus\n\n-   Purpose: Retrieve forms based on creation dates and status.\n-   Parameters: req, res\n-   Response: Filtered list of consent forms or error.\n\nHelper Function\n\nparseMMDDYYYY\n\n-   Purpose: Parse date strings in the format MM/DD/YYYY.\n-   Input: dateString\n-   Output: A JavaScript Date object or null if invalid.\n\nDependencies\n\n-   Mongoose: For MongoDB interactions.\n-   SendGrid: For sending notification emails.\n-   Express: As part of the Node.js web server framework.\n\nThis comprehensive controller manages all operations related to consent\nforms, ensuring seamless data handling and user notifications within the\nbackend system.\n\nAuthController.js Documentation\n\nWelcome to the documentation for AuthController.js. This file is\nresponsible for handling all authentication-related operations within\nthe \u201cWellbility State School Backend\u201d system. Below you will find\ndetailed explanations of each function, their purpose, and their use\ncases.\n\nIndex\n\n1.  Introduction\n2.  Dependencies\n3.  Functions\n    -   Register\n    -   Login\n    -   Send Reset Email\n    -   Reset Password\n    -   Logout\n\n------------------------------------------------------------------------\n\nIntroduction\n\nThe AuthController.js file manages user registration, login, password\nreset, and logout functionalities. It interacts with the User, School,\nDistrict, Role, and Token models to handle user data and authentication\ntokens.\n\nDependencies\n\nThis file imports several Node.js modules and models to perform its\noperations:\n\n-   Models: User, School, District, Role, Token\n-   Node.js Modules: jsonwebtoken, crypto, bcryptjs\n-   Utility Function: sendToParent from sendGrid for sending emails\n\nFunctions\n\nRegister\n\n    exports.register ": null,
    "\n      const limit ": "parseInt(req.query.limit, 10) || 10",
    "\n      try {\n        const options ": "{ page: page, limit: limit, sort: { createdAt: -1 } }",
    "\n        const districts ": "await District.paginate({}, options)",
    "\n        res\n          .status(200)\n          .json({\n            data: districts.docs,\n            totalDocs: districts.totalDocs,\n            totalPages: districts.totalPages,\n            currentPage: districts.page,\n            status: 200,\n            message: 'All districts retrieved',\n          })": null,
    "\n      } catch (error) {\n        res.status(500).send({ status: 500, message: error.message })": null,
    "\n      }\n    }": null,
    "\n\nGet District by ID\n\nEndpoint: GET /districts/:id\n\nFetches a single district using its ID.\n\n-   Response:\n    -   200 OK: Returns the district data.\n    -   404 Not Found: District with the specified ID does not exist.\n\n    exports.getDistrictById ": null,
    "\n        if (!district) {\n          return res\n            .status(404)\n            .json({ status: 404, message: 'District not found' })": null,
    "\n        }\n        res.json({ data: district, status: 200, message: 'District retrieved' })": null,
    "\n      } catch (error) {\n        res.status(500).send(error.message)": null,
    "\n\nCreate District\n\nEndpoint: POST /districts\n\nCreates a new district with the provided name.\n\n-   Request Body:\n\n    -   name (string): The name of the district.\n\n-   Response:\n\n    -   201 Created: District was successfully created.\n    -   500 Internal Server Error: An error occurred during the creation\n        process.\n\n    exports.createDistrict ": null,
    "\n        const newDistrict ": "new District({ name })",
    "\n        await newDistrict.save()": null,
    "\n        res\n          .status(201)\n          .json({\n            data: newDistrict,\n            status: 201,\n            message: 'District created successfully',\n          })": null,
    "\n\nUpdate District\n\nEndpoint: PUT /districts/:id\n\nUpdates an existing district\u2019s name by its ID.\n\n-   Request Body:\n\n    -   name (string): The new name for the district.\n\n-   Response:\n\n    -   200 OK: District was successfully updated.\n    -   404 Not Found: District with the specified ID does not exist.\n\n    exports.updateDistrict ": null,
    "\n        const updatedDistrict ": "await District.findByIdAndUpdate(\n          req.params.id,\n          { name },\n          { new: true, runValidators: true },\n        )",
    "\n        if (!updatedDistrict) {\n          return res\n            .status(404)\n            .json({ status: 404, message: 'District not found' })": null,
    "\n        }\n        res.json({\n          data: updatedDistrict,\n          status: 200,\n          message: 'District updated successfully',\n        })": null,
    "\n\nDelete District\n\nEndpoint: DELETE /districts/:id\n\nDeletes a district by its ID if no schools are associated with it.\n\n-   Response:\n    -   200 OK: District was successfully deleted.\n    -   400 Bad Request: Cannot delete a district that has associated\n        schools.\n    -   404 Not Found: District with the specified ID does not exist.\n\n    exports.deleteDistrict ": null,
    "\n        const schoolsInDistrict ": "await School.find({ district: id })",
    "\n        if (schoolsInDistrict.length > 0) {\n          return res\n            .status(400)\n            .json({\n              status: 404,\n              message: 'Cannot delete district with existing schools',\n            })": null,
    "\n        }\n        const deletedDistrict ": "await District.findByIdAndDelete(id)",
    "\n        if (!deletedDistrict) {\n          return res\n            .status(404)\n            .json({ status: 404, message: 'District not found' })": null,
    "\n        }\n        res.json({ status: 200, message: 'District deleted successfully' })": null,
    "\n\n------------------------------------------------------------------------\n\nThis documentation provides an overview of the functionalities provided\nby the DistrictController.js file and serves as a guide for developers\nworking on or integrating with the Wellbility State School Backend\nproject.\n\nDocumentation for PublicLinkController.js\n\nThis file is part of the backend system for the Wellbility State School,\nimplemented using Node.js and Express. It defines a controller for\nmanaging public links associated with consent forms, facilitating secure\naccess and interaction between parents and the school system.\n\nOverview\n\nThe PublicLinkController handles the creation and management of public\nlinks that are used to share consent forms with parents. This controller\nensures that each link is unique and has an expiration time, enhancing\nsecurity and data integrity.\n\nFunctions\n\n1. Generate a Random Link\n\n    const generateLink ": null,
    "\n\n-   Purpose: Generates a unique, random string using the crypto module.\n    This link is used as the identifier in the URL for accessing the\n    consent form.\n-   Usage: Internally used within the controller to ensure each public\n    link is unique.\n\n2. Create a Public Link\n\n    exports.createPublicLink ": null,
    "\n        const parent ": "await Parent.findById(parentId)",
    "\n        const consentForm ": "await ConsentForm.findById(consentFormId)",
    "\n\n        if (!parent || !consentForm) {\n          return res\n            .status(404)\n            .json({ message: 'Parent or ConsentForm not found' })": null,
    "\n        }\n\n        const existingLink ": "await PublicLink.findOne({\n          parentId,\n          consentFormId,\n          expiryTime: { $gt: new Date() },\n        })",
    "\n        if (existingLink) {\n          return res.status(200).json(existingLink)": null,
    "\n        }\n\n        const link ": "generateLink()",
    "\n        const expiryTime ": "new Date()",
    "\n        expiryTime.setHours(expiryTime.getHours() + 24)": null,
    "\n\n        const publicLink ": "new PublicLink({\n          parentId,\n          consentFormId,\n          link,\n          expiryTime,\n        })",
    "\n        await publicLink.save()": null,
    "\n\n        parent.links.push(publicLink._id)": null,
    "\n        await parent.save()": null,
    "\n\n        const templateId ": "'d-886de40787e44f95ab43e7e5e4b54f33'",
    "\n        const data ": "{ publicLink: link }",
    "\n        await sendToParent(parent.email, templateId, data)": null,
    "\n\n        res.status(201).json(publicLink)": null,
    "\n      } catch (error) {\n        res.status(500).json({ message: 'Error creating public link', error })": null,
    "\n\nConclusion\n\nThe PublicLinkController.js efficiently manages the lifecycle of public\nlinks, ensuring secure and temporary access to sensitive information\nlike consent forms. The integration with email services ensures that\nparents are promptly notified, enhancing the communication process\nwithin the school system.\n\nUserController.js Documentation\n\nThe UserController.js file contains functions for managing user-related\noperations within the application. This controller facilitates\ninteractions with the User model and provides functionalities for user\nmanagement, including creation, retrieval, updating, and deletion\noperations.\n\nTable of Contents\n\n-   Get All Roles\n-   Get All Users\n-   Get User by ID\n-   Create User\n-   Update User\n-   Delete User\n-   Reset Password\n-   Role Validation\n-   Dependencies\n\n------------------------------------------------------------------------\n\nGet All Roles\n\nFunction\n\n    exports.getAllRoles ": null,
    "\n\nDescription\n\nRetrieves all available user roles, depending on the role of the\nrequesting user:\n\n-   Admin: Can retrieve all roles.\n-   RPHN (Regional Public Health Nurse): Can retrieve specific roles\n    such as \u201cVaccinator\u201d and \u201cNurse\u201d.\n-   Other roles: Restricted access, returns a 403 error.\n\nUsage\n\n-   Method: GET\n-   Route: /roles/:role\n-   Response: JSON object containing roles data or an error message.\n\n------------------------------------------------------------------------\n\nGet All Users\n\nFunction\n\n    exports.getAllUsers ": null,
    "\n\nDescription\n\nRetrieves all users, with pagination and role-based access control:\n\n-   Admin: Access to all users.\n-   RPHN: Access to specific roles such as \u201cNurse\u201d and \u201cVaccinator\u201d.\n-   Other roles: Restricted access, returns a 403 error.\n\nUsage\n\n-   Method: GET\n-   Route: /users/:role\n-   Query Parameters: page, limit\n-   Response: JSON object with paginated users data or an error message.\n\n------------------------------------------------------------------------\n\nGet User by ID\n\nFunction\n\n    exports.getUserById ": null,
    "\n\nDescription\n\nFetches a single user by their ID, including related role, school, and\ndistrict information.\n\nUsage\n\n-   Method: GET\n-   Route: /users/:id\n-   Response: JSON object containing user data or an error message.\n\n------------------------------------------------------------------------\n\nCreate User\n\nFunction\n\n    exports.createUser ": null,
    "\n\nDescription\n\nCreates a new user in the system with a randomly generated default\npassword. Sends an email to the user with a password reset link.\n\nUsage\n\n-   Method: POST\n-   Route: /users\n-   Request Body: Must include username, email, role, school, district.\n-   Response: JSON object confirming user creation and email dispatch or\n    an error message.\n\n------------------------------------------------------------------------\n\nUpdate User\n\nFunction\n\n    exports.updateUser ": null,
    "\n\nDescription\n\nUpdates an existing user\u2019s information. Allows for role, school, and\ndistrict updates. Password updates are hashed before saving.\n\nUsage\n\n-   Method: PUT\n-   Route: /users/:id\n-   Request Body: Fields to update.\n-   Response: JSON object with updated user data or an error message.\n\n------------------------------------------------------------------------\n\nDelete User\n\nFunction\n\n    exports.deleteUser ": null,
    "\n\nDescription\n\nPerforms a soft-delete by setting the isDeleted flag to true. Also\nsupports permanent deletion if specified.\n\nUsage\n\n-   Method: DELETE\n-   Route: /users/:id\n-   Response: JSON object confirming deletion or an error message.\n\n------------------------------------------------------------------------\n\nReset Password\n\nFunction\n\n    exports.resetPassword ": null,
    "\n\nDescription\n\nResets a user\u2019s password to a new default value and sends a password\nreset email.\n\nUsage\n\n-   Method: POST\n-   Route: /users/:id/reset-password\n-   Response: JSON object confirming password reset or an error message.\n\n------------------------------------------------------------------------\n\nRole Validation\n\nFunction\n\n    async function checkRole(role, school, district, isDeleted, res) {\n      /* ... */\n    }\n\nDescription\n\nValidates role-specific requirements, ensuring integrity in role\nassignments and associations with schools and districts.\n\n------------------------------------------------------------------------\n\nDependencies\n\n-   Models: User, Role, ConsentForm\n-   Utilities: bcryptjs, crypto, sendGrid\n-   Custom Functions: sendToParent for email dispatch\n\n------------------------------------------------------------------------\n\nThis documentation provides an overview of the UserController.js\nfunctionality, assisting developers and system maintainers in\nunderstanding and utilizing the user management features effectively.\n\nSchoolController.js Documentation\n\nThis file is part of the backend system for managing school-related\ndata. It provides various endpoints for managing schools in a MongoDB\ndatabase using Mongoose. The functionalities include retrieving,\ncreating, updating, and deleting school records. The controller\ninteracts with the School model, and includes querying based on district\nassociations and pagination support.\n\nIndex\n\n-   Endpoints\n    -   Get All Schools by District(s)\n    -   Get All Schools\n    -   Get School by ID\n    -   Create School\n    -   Update School\n    -   Delete School\n\nEndpoints\n\nGet All Schools by District(s)\n\nEndpoint: GET /schools/districts\n\nRetrieves all schools associated with one or more district IDs. This\nendpoint allows filtering schools based on the district they belong to.\n\n-   Query Parameters:\n\n    -   district (required): Comma-separated list of district IDs.\n\n-   Response:\n\n    -   Status 200: List of schools in the specified district(s).\n    -   Status 400: If no district ID is provided.\n    -   Status 500: On server error.\n\n    exports.getAllDistrictSchools ": null,
    "\n\nGet All Schools\n\nEndpoint: GET /schools\n\nFetches all schools, with optional pagination. If pagination parameters\nare not provided, all schools are retrieved without pagination.\n\n-   Query Parameters:\n\n    -   page (optional): Page number for pagination.\n    -   limit (optional): Number of records per page.\n\n-   Response:\n\n    -   Status 200: List of all schools, with or without pagination.\n    -   Status 500: On server error.\n\n    exports.getAllSchools ": null,
    "\n\nGet School by ID\n\nEndpoint: GET /schools/:id\n\nRetrieves a single school by its unique ID.\n\n-   Route Parameters:\n\n    -   id (required): The unique identifier of the school.\n\n-   Response:\n\n    -   Status 200: The school data.\n    -   Status 404: If the school is not found.\n    -   Status 500: On server error.\n\n    exports.getSchoolById ": null,
    "\n\nCreate School\n\nEndpoint: POST /schools\n\nCreates a new school record.\n\n-   Request Body:\n\n    -   name (required): The name of the school.\n    -   district (optional): The ID of the district the school belongs\n        to.\n\n-   Response:\n\n    -   Status 201: Successfully created school.\n    -   Status 500: On server error.\n\n    exports.createSchool ": null,
    "\n\nUpdate School\n\nEndpoint: PUT /schools/:id\n\nUpdates an existing school record by its ID.\n\n-   Route Parameters:\n\n    -   id (required): The unique identifier of the school.\n\n-   Request Body:\n\n    -   name (optional): Updated name for the school.\n    -   district (optional): Updated district ID.\n\n-   Response:\n\n    -   Status 200: Successfully updated school.\n    -   Status 404: If the school is not found.\n    -   Status 500: On server error.\n\n    exports.updateSchool ": null,
    "\n\nDelete School\n\nEndpoint: DELETE /schools/:id\n\nDeletes a school record by its ID.\n\n-   Route Parameters:\n\n    -   id (required): The unique identifier of the school.\n\n-   Response:\n\n    -   Status 200: Successfully deleted school.\n    -   Status 404: If the school is not found.\n    -   Status 500: On server error.\n\n    exports.deleteSchool ": null,
    "\n\nConclusion\n\nThe SchoolController.js provides essential CRUD operations to manage\nschool records efficiently, with capabilities for district-based\nfiltering and pagination. It ensures that schools can be managed within\nthe context of their associated districts and supports administrative\nfunctions related to school data management.\n\nDocumentation for authMiddleware.js\n\nThe authMiddleware.js is a middleware module designed to handle\nauthentication in an Express.js application using JSON Web Tokens (JWT).\nThis middleware ensures that only authenticated users can access certain\nroutes by verifying the JWT provided in the request headers.\n\n\ud83d\udcdd File Overview\n\n-   Filename: authMiddleware.js\n-   Purpose: To authenticate and authorize users by verifying JWT tokens\n    in incoming requests.\n\n\ud83d\udcd1 Key Features\n\n-   Token Extraction: Extracts the token from the request Authorization\n    header.\n-   Token Verification: Verifies the token using jsonwebtoken to ensure\n    it is valid and not expired.\n-   Database Check: Confirms the token exists in the database and has\n    not expired.\n-   User Authentication: Attaches the decoded user information to the\n    request object for downstream middleware and route handlers.\n-   Error Handling: Provides meaningful responses in case of missing,\n    invalid, or expired tokens.\n\n\ud83d\udcdc Code Explanation\n\nHere is a breakdown of the code and its functionality:\n\n    const jwt ": "require('jsonwebtoken')",
    "\n    const Token ": "require('../models/Token')",
    "\n\n    const verifyToken ": null,
    "\n        if (!authorizationHeader) {\n          return res\n            .status(401)\n            .json({ status: 401, message: 'Access Denied. No token provided.' })": null,
    "\n        }\n\n        // Extract the token from the Bearer scheme\n        const token ": "authorizationHeader.split(' ')[1]",
    "\n\n        // Verify the token\n        const decoded ": "jwt.verify(token, process.env.JWT_SECRET)",
    "\n\n        // Check if the token exists in the database and is still valid\n        const tokenDocument ": "await Token.findOne({ token: token })",
    "\n        if (!tokenDocument || new Date() > tokenDocument.expires) {\n          return res\n            .status(401)\n            .json({ status: 401, message: 'Invalid token or token has expired.' })": null,
    "\n        }\n\n        // Attach the decoded user information to the request object\n        req.user ": "decoded",
    "\n\n        // Proceed to the next middleware or route handler\n        next()": null,
    "\n      } catch (error) {\n        // Handle any errors that occur during token verification\n        console.error('Token verification error:', error)": null,
    "\n        return res.status(400).json({ status: 400, message: 'Invalid token.' })": null,
    "\n\n\ud83d\udee0\ufe0f Functionality\n\n1.  Token Extraction:\n\n    -   The middleware checks for an Authorization header in the\n        incoming request. If not found, it responds with a\n        401 Access Denied message.\n\n2.  Token Splitting:\n\n    -   It splits the header value to extract the token, assuming it\u2019s\n        in the format Bearer <token>.\n\n3.  Verification:\n\n    -   The token is verified using jsonwebtoken and a secret key\n        (process.env.JWT_SECRET).\n\n4.  Database Validation:\n\n    -   It checks if the token exists in the database (using a Mongoose\n        model Token) and ensures it\u2019s not expired.\n\n5.  Request Augmentation:\n\n    -   If the token is valid, it attaches the decoded token data to the\n        req.user, allowing subsequent middleware and routes to access\n        user information.\n\n6.  Error Handling:\n\n    -   If any step fails (missing token, invalid token, expired token),\n        appropriate HTTP status codes and messages are returned.\n\n\ud83d\ude80 Usage\n\n-   Importing: This middleware should be imported and used in your\n    routes where authentication is necessary.\n\n    const verifyToken ": "require('./middlewares/authMiddleware')",
    "\n\n    // Use it as a middleware in your routes\n    app.get('/protected-route', verifyToken, (req, res) ": "> {\n      res.send('This is a protected route')",
    "\n\n\ud83d\udd10 Security\n\n-   JWT Secret: Ensure that you set a strong and secure JWT secret in\n    your environment variables (process.env.JWT_SECRET).\n-   Token Expiry: Regularly check and enforce token expiry to enhance\n    security.\n\n\u26a0\ufe0f Error Handling\n\n-   401 Unauthorized: Returned if no token is provided or the token is\n    invalid or expired.\n-   400 Bad Request: Returned if there is a general error in token\n    verification.\n\nThis middleware is crucial for securing routes in your application,\nensuring that only authenticated users gain access to protected\nresources.\n\nconsentFormValidatorMiddleware.js Documentation \ud83d\udcc4\n\nThis file is part of the backend middleware for validating consent form\ndata in the Wellbility State School Backend system. The middleware\nensures that incoming requests to update consent forms contain all\nnecessary and correctly formatted information before processing further.\n\n------------------------------------------------------------------------\n\nOverview\n\nThe consentFormValidatorMiddleware.js file utilizes the\nexpress-validator library to enforce validation rules on consent form\ndata. This middleware is crucial for maintaining data integrity and\nensuring that the application only processes valid data.\n\nKey Features\n\n-   Validation: Checks that all required fields in a consent form are\n    provided and correctly formatted.\n-   Error Handling: Captures validation errors and sends them back in\n    the response for client-side correction before proceeding further.\n\nMiddleware Functions\n\nvalidateConsentFormUpdate\n\nThis middleware function applies a series of validation checks on the\nrequest body. It ensures that all necessary fields are present and that\nspecific fields meet certain criteria, such as being a valid email\nformat.\n\nValidation Rules\n\n  -----------------------------------------------------------------------------------\n  Field                          Rule             Message if Invalid\n  ------------------------------ ---------------- -----------------------------------\n  dateSigned                     Must not be      \u201cDate signed is required\u201d\n                                 empty            \n\n  schoolId                       Must not be      \u201cSchool ID is required\u201d\n                                 empty            \n\n  firstName                      Must not be      \u201cFirst name is required\u201d\n                                 empty            \n\n  middleInitial                  Not required     -\n\n  lastName                       Must not be      \u201cLast name is required\u201d\n                                 empty            \n\n  dateOfBirth                    Must not be      \u201cDate of birth is required\u201d\n                                 empty            \n\n  age                            Must not be      \u201cAge is required\u201d\n                                 empty            \n\n  physicalAddress                Must not be      \u201cPhysical address is required\u201d\n                                 empty            \n\n  townCity                       Must not be      \u201cTown/city is required\u201d\n                                 empty            \n\n  state                          Must not be      \u201cState is required\u201d\n                                 empty            \n\n  zip                            Must not be      \u201cZIP code is required\u201d\n                                 empty            \n\n  email                          Must be a valid  \u201cEmail must be a valid email\u201d\n                                 email format     \n\n  cellPhoneNumber                Must not be      \u201cCell phone number is required\u201d\n                                 empty            \n\n  gender                         Must not be      \u201cGender is required\u201d\n                                 empty            \n\n  race                           Must not be      \u201cRace is required\u201d\n                                 empty            \n\n  ethnicity                      Must not be      \u201cEthnicity is required\u201d\n                                 empty            \n\n  insurance                      Must not be      \u201cInsurance is required\u201d\n                                 empty            \n\n  allergyEggs                    Must not be      \u201cAllergy to eggs status is\n                                 empty            required\u201d\n\n  allergyInfluenzaVaccine        Must not be      \u201cAllergy to influenza vaccine\n                                 empty            status is required\u201d\n\n  historyGuillainBarreSyndrome   Must not be      \u201cHistory of Guillain-Barre Syndrome\n                                 empty            is required\u201d\n\n  feltDizzyOrFaint               Must not be      \u201cFelt dizzy or faint status is\n                                 empty            required\u201d\n\n  reviewedVaccineInfoStatement   Must not be      \u201cReviewed vaccine information\n                                 empty            statement status is required\u201d\n\n  signerName                     Must not be      \u201cSigner name is required\u201d\n                                 empty            \n\n  signerDaytimePhoneNumber       Must not be      \u201cSigner daytime phone number is\n                                 empty            required\u201d\n  -----------------------------------------------------------------------------------\n\nhandleValidationErrors\n\nThis middleware function is designed to catch and handle errors\nresulting from the validation checks applied by\nvalidateConsentFormUpdate.\n\n-   Functionality: It checks for any validation errors recorded during\n    the request processing. If errors are found, it sends a\n    400 Bad Request response with a detailed list of errors, allowing\n    the client to correct the input data.\n\nUsage\n\nTo use this middleware in your Express application, simply import the\nvalidateConsentFormUpdate and handleValidationErrors functions and apply\nthem to routes that require consent form data validation.\n\n    const {\n      validateConsentFormUpdate,\n      handleValidationErrors,\n    } ": "require('./middlewares/consentFormValidatorMiddleware')",
    "\n\n    app.post(\n      '/consent-form',\n      validateConsentFormUpdate,\n      handleValidationErrors,\n      (req, res) ": "> {\n        // Handle the request after successful validation\n      },\n    )",
    "\n\n------------------------------------------------------------------------\n\nThis middleware is essential for maintaining high data quality and\npreventing invalid data from entering the system, thereby ensuring that\nall consent forms are complete and correctly filled out.\n\nDocumentation for auth.js \ud83d\udec2\n\nThis file defines the routes related to authentication operations in the\n\u201cWellbility State School Backend\u201d system. Using Express.js, it sets up\nendpoints for handling user registration, login, logout, and password\nreset functionalities. Below is a detailed breakdown of each route and\nits purpose.\n\nIndex\n\n-   Dependencies\n-   Routes\n    -   POST /register\n    -   POST /login\n    -   POST /logout\n    -   POST /password-reset-request\n    -   POST /password-reset\n-   Export\n\nDependencies\n\nThe file utilizes the following dependencies:\n\n-   express: A minimal and flexible Node.js web application framework\n    that provides a robust set of features for web and mobile\n    applications.\n-   AuthController: A controller module that handles the business logic\n    for authentication-related actions.\n\n    const express ": "require('express')",
    "\n    const router ": "express.Router()",
    "\n    const AuthController ": "require('../controllers/AuthController')",
    "\n\nRoutes\n\nPOST /register\n\n-   Endpoint: /register\n-   Description: This route handles the registration of a new user. It\n    expects user details such as username, email, password, userType,\n    and school (if applicable) in the request body.\n-   Controller Method: AuthController.register\n\nPOST /login\n\n-   Endpoint: /login\n-   Description: This route manages user login. It requires the user\u2019s\n    email and password in the request body. Upon successful\n    authentication, a JWT token is issued.\n-   Controller Method: AuthController.login\n\nPOST /logout\n\n-   Endpoint: /logout\n-   Description: This route handles user logout. It clears the user\u2019s\n    session token to log them out.\n-   Controller Method: AuthController.logout\n\nPOST /password-reset-request\n\n-   Endpoint: /password-reset-request\n-   Description: This route initiates the password reset process. It\n    takes the user\u2019s email and sends a password reset link to this email\n    address.\n-   Controller Method: AuthController.sendPasswordResetEmail\n\nPOST /password-reset\n\n-   Endpoint: /password-reset\n-   Description: This route completes the password reset process. It\n    expects a token, new password, and password confirmation in the\n    request body to reset the user\u2019s password.\n-   Controller Method: AuthController.resetPassword\n\nExport\n\nThe file exports the Express router, which includes all the defined\nroutes.\n\n    module.exports ": "router",
    "\n\n  Note: The routes make calls to the AuthController, which contains the\n  actual logic for each authentication operation. Ensure that the\n  methods within this controller handle the respective functionalities\n  correctly and securely.\n\nDocumentation for index.js \ud83d\ude80\n\nThis file serves as the central routing hub for the \u201cWellbility State\nSchool Backend\u201d application. It utilizes Express.js to manage various\nendpoints related to users, schools, districts, public links, and\nconsent forms. The routes are protected by middleware to ensure that\nonly authorized requests are processed.\n\nTable of Contents\n\n1.  Overview\n2.  Dependencies\n3.  Middleware\n4.  Routes\n    -   Public Links\n    -   Users\n    -   Schools\n    -   Districts\n    -   Consent Forms\n5.  Export\n\nOverview\n\nThe index.js file sets up routing for the application, directing HTTP\nrequests to the appropriate controller functions. It applies\nauthentication middleware to secure routes, allowing only authenticated\nusers to access certain endpoints.\n\nDependencies\n\n    const express ": "require('express')",
    "\n    const SchoolController ": "require('../controllers/SchoolController')",
    "\n    const DistrictController ": "require('../controllers/DistrictController')",
    "\n    const UserController ": "require('../controllers/UserController')",
    "\n    const { createPublicLink } ": "require('../controllers/PublicLinkController')",
    "\n    const ConsentFormController ": "require('../controllers/ConsentFormController')",
    "\n    const {\n      validateConsentFormUpdate,\n      handleValidationErrors,\n    } ": "require('../middlewares/consentFormValidatorMiddleware')",
    "\n    const verifyToken ": "require('../middlewares/authMiddleware')",
    "\n\n-   Express: Used to create a router for handling HTTP requests.\n-   Controllers: Contains the logic to handle requests for specific\n    resources.\n-   Middlewares: Used for request validation and authentication.\n\nMiddleware\n\nAuthentication Middleware\n\n    router.use((req, res, next) ": null,
    "\n      const pathMatches ": null,
    "\n      if (pathMatches) {\n        return next()": null,
    "\n      } else {\n        return verifyToken(req, res, next)": null,
    "\n      }\n    })": null,
    "\n\n-   Functionality: Applies the verifyToken middleware to secure routes.\n-   Excluded Paths: Certain paths are excluded from the token\n    verification, allowing public access.\n\nRoutes\n\nPublic Links\n\n-   POST /public-links: Create a new public link.\n    -   Controller: createPublicLink\n\nUsers\n\n-   GET /users/:role: Retrieve all users based on role.\n-   GET /user-roles/:role: Retrieve all roles based on user role.\n-   GET /get-user/:id: Retrieve a single user by ID.\n-   POST /create-user: Create a new user.\n-   PUT /update-user/:id: Update a user by ID.\n-   DELETE /delete-user/:id: Soft delete a user by ID.\n-   POST /user/reset-password/:id: Reset a user\u2019s password.\n\nSchools\n\n-   GET /all-schools: Retrieve all schools.\n-   GET /district-schools: Retrieve schools based on district ID(s).\n-   GET /schools/:id: Retrieve a single school by ID.\n-   POST /schools: Create a new school.\n-   PUT /schools/:id: Update a school by ID.\n-   DELETE /schools/:id: Delete a school by ID.\n\nDistricts\n\n-   GET /districts: Retrieve all districts.\n-   GET /districts/:id: Retrieve a single district by ID.\n-   POST /districts: Create a new district.\n-   PUT /districts/:id: Update a district by ID.\n-   DELETE /districts/:id: Delete a district by ID.\n\nConsent Forms\n\n-   POST /create-consent-form: Create a new consent form.\n-   GET /get-consent-forms: Get all consent forms.\n-   GET /consent-forms/entity: Get consent forms by school or district.\n-   POST /create-form-with-image: Create a consent form with an image.\n-   GET /get-consent-form/:id: Get a consent form by ID.\n-   PUT /update-consent-form/:id: Update a consent form by ID.\n-   PUT /update-admin-consent-form/:id: Admin update a consent form.\n-   PUT /update-image-consent-form/:id: Update consent form with image.\n-   DELETE /delete-consent-form/:id: Delete a consent form by ID.\n-   POST /get-consent-forms-reports: Get consent forms for reports.\n\nExport\n\nThe router is exported for use in the main application file (server.js),\nallowing the routes to be integrated into the server.\n\n    module.exports ": "router",
    "\n\nThis documentation provides a comprehensive overview of the routing\nsetup within the index.js file of the \u201cWellbility State School Backend\u201d\nproject. Each route is mapped to a specific controller function,\nensuring that requests are processed correctly and securely.\n\nserver.js Documentation \ud83d\udcc4\ud83d\ude80\n\nThe server.js file is the entry point for the \u201cWellbility State School\nBackend\u201d application. It sets up the Express server, connects to a\nMongoDB database using Mongoose, configures middleware, and defines the\nbasic routes for the application. Below is a detailed breakdown of its\ncomponents and functionalities.\n\nTable of Contents\n\n1.  Overview\n2.  Environment Configuration\n3.  Middleware Setup\n4.  Database Connection\n5.  Routes Configuration\n6.  Starting the Server\n\nOverview\n\nThe server.js file initializes an Express application and configures it\nto connect to a MongoDB database. It also sets up middleware for\nhandling JSON requests, CORS for cross-origin resource sharing, and\nincludes routing for various endpoints.\n\nEnvironment Configuration\n\n    const dotenv ": "require('dotenv')",
    "\n    dotenv.config()": null,
    "\n\n-   dotenv: Used to load environment variables from a .env file into\n    process.env. This allows sensitive information, such as database\n    URLs and server ports, to be kept out of the source code.\n\nMiddleware Setup\n\n    const express ": "require('express')",
    "\n    const bodyParser ": "require('body-parser')",
    "\n    const cors ": "require('cors')",
    "\n    const app ": "express()",
    "\n\n    app.use(bodyParser.json({ limit: '50mb' }))": null,
    "\n    app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }))": null,
    "\n    app.use(express.json())": null,
    "\n    app.use(cors({ origin: '*' }))": null,
    "\n\n-   Body Parser: Handles JSON and URL-encoded data with a size limit of\n    50mb, which is useful for handling large payloads.\n-   CORS: Configured to allow requests from any origin, which is\n    important for developing applications that might be accessed from\n    different domains.\n\nDatabase Connection\n\n    const mongoose ": "require('mongoose')",
    "\n\n    mongoose\n      .connect(process.env.DATABASE_URL, {\n        serverApi: { version: '1', strict: true, deprecationErrors: true },\n      })\n      .then(() ": "> {\n        console.log('Connected to MongoDB using Mongoose!')",
    "\n      })\n      .catch((error) ": "> {\n        console.error('Error connecting to MongoDB:', error)",
    "\n\n-   Mongoose: Connects to MongoDB using a URL provided in the\n    environment variables. The connection is configured to use the\n    latest server API version for better compatibility and error\n    handling.\n\nRoutes Configuration\n\n    const authRoutes ": "require('./routes/auth')",
    "\n    const indexRouter ": "require('./routes/index')",
    "\n\n    app.use('/api', indexRouter)": null,
    "\n    app.use('/auth', authRoutes)": null,
    "\n\n    app.get('/', (req, res) ": "> {\n      res.send('Hello New World!')",
    "\n\n-   Auth Routes: Handles authentication-related endpoints like login and\n    registration.\n-   Index Router: Includes various application routes, organized for\n    easier management.\n-   Root Route: A simple endpoint that returns a greeting message to\n    verify that the server is running.\n\nStarting the Server\n\n    app.listen(process.env.PORT, () ": "> {\n      console.log(`Server running on port ${process.env.PORT}`)",
    "\n\n-   Port Configuration: The server listens on a port specified in the\n    environment variables, allowing it to be easily changed without\n    modifying the code.\n\nThis setup provides a robust foundation for running the backend server,\nhandling HTTP requests, and managing data interactions with a MongoDB\ndatabase. \ud83d\ude80\ud83c\udf10": null
  }
]
